[{"path":"https://github.com/jeksterslab/betaMC/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 Ivan Jacob Agaloos Pesigan Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://github.com/jeksterslab/betaMC/articles/benchmark.html","id":"data-and-model","dir":"Articles","previous_headings":"","what":"Data and Model","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"df <- betaMC::nas1982"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/benchmark.html","id":"arguments","dir":"Articles","previous_headings":"Benchmark","what":"Arguments","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"benchmark <- microbenchmark(   MC = {     formula <- \"QUALITY ~ NARTIC + PCTGRT + PCTSUPP\"     object <- lm(formula = formula, data = df)     mc <- MC(object = object, R = R, type = \"mvn\")     BetaMC(object = mc)   },   NB = {     formula <- \"QUALITY ~ NARTIC + PCTGRT + PCTSUPP\"     object <- lm(formula = formula, data = df)     BetaNB(formula = formula, data = df, B = B)   },   times = 10 )"},{"path":"https://github.com/jeksterslab/betaMC/articles/benchmark.html","id":"summary-of-benchmark-results","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark, unit = \"ms\") #>   expr       min        lq      mean    median        uq       max neval #> 1   MC  465.2447  476.2758  497.8912  489.2052  509.0998  569.4927    10 #> 2   NB 7640.9612 7663.5651 7694.5510 7671.4467 7703.0725 7874.0434    10"},{"path":"https://github.com/jeksterslab/betaMC/articles/benchmark.html","id":"summary-of-benchmark-results-relative-to-the-faster-method","dir":"Articles","previous_headings":"Benchmark","what":"Summary of Benchmark Results Relative to the Faster Method","title":"Benchmark: Comparing the Monte Carlo Method with Nonparametric Bootstrapping","text":"","code":"summary(benchmark, unit = \"relative\") #>   expr      min      lq     mean   median       uq      max neval #> 1   MC  1.00000  1.0000  1.00000  1.00000  1.00000  1.00000    10 #> 2   NB 16.42353 16.0906 15.45428 15.68145 15.13077 13.82642    10"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"description","dir":"Articles","previous_headings":"","what":"Description","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"Generates Monte Carlo confidence intervals standardized regression coefficients (beta) effect sizes, including multiple correlation, semipartial correlations, improvement R-squared, squared partial correlations, differences standardized regression coefficients, models fitted lm(). betaMC combines ideas Monte Carlo confidence intervals indirect effect (Pesigan Cheung, 2023: http://doi.org/10.3758/s13428-023-02114-4) sampling covariance matrix regression coefficients (Dudgeon, 2017: http://doi.org/10.1007/s11336-017-9563-z) generate confidence intervals effect sizes regression.","code":""},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"installation","dir":"Articles","previous_headings":"","what":"Installation","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"can install CRAN release betaMC : can install development version betaMC GitHub :","code":"install.packages(\"betaMC\") if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"jeksterslab/betaMC\")"},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"example","dir":"Articles","previous_headings":"","what":"Example","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"example, multiple regression model fitted using program quality ratings (QUALITY) regressand/outcome variable number published articles attributed program faculty members (NARTIC), percent faculty members holding research grants (PCTGRT), percentage program graduates received support (PCTSUPP) regressor/predictor variables using data set 1982 ratings 46 doctoral programs psychology USA (National Research Council, 1982). Confidence intervals standardized regression coefficients generated using BetaMC() function betaMC package.","code":"library(betaMC) df <- betaMC::nas1982"},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"regression","dir":"Articles","previous_headings":"Example","what":"Regression","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"Fit regression model using lm() function.","code":"object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = df)"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"normal-theory-approach","dir":"Articles","previous_headings":"Example > Monte Carlo Sampling Distribution of Parameters","what":"Normal-Theory Approach","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"","code":"mvn <- MC(object, type = \"mvn\")"},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"asymptotic-distribution-free-approach","dir":"Articles","previous_headings":"Example > Monte Carlo Sampling Distribution of Parameters","what":"Asymptotic distribution-free Approach","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"","code":"adf <- MC(object, type = \"adf\")"},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"heteroskedasticity-consistent-approach-hc3","dir":"Articles","previous_headings":"Example > Monte Carlo Sampling Distribution of Parameters","what":"Heteroskedasticity Consistent Approach (HC3)","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"","code":"hc3 <- MC(object, type = \"hc3\")"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"normal-theory-approach-1","dir":"Articles","previous_headings":"Example > Standardized Regression Slopes","what":"Normal-Theory Approach","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"","code":"BetaMC(mvn, alpha = 0.05) #> Call: #> BetaMC(object = mvn, alpha = 0.05) #>  #> Standardized regression slopes #> type = \"mvn\" #>            est     se     R   2.5%  97.5% #> NARTIC  0.4951 0.0759 20000 0.3381 0.6340 #> PCTGRT  0.3915 0.0772 20000 0.2390 0.5411 #> PCTSUPP 0.2632 0.0743 20000 0.1174 0.4099"},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"asymptotic-distribution-free-approach-1","dir":"Articles","previous_headings":"Example > Standardized Regression Slopes","what":"Asymptotic distribution-free Approach","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"","code":"BetaMC(adf, alpha = 0.05) #> Call: #> BetaMC(object = adf, alpha = 0.05) #>  #> Standardized regression slopes #> type = \"adf\" #>            est     se     R   2.5%  97.5% #> NARTIC  0.4951 0.0676 20000 0.3513 0.6142 #> PCTGRT  0.3915 0.0707 20000 0.2428 0.5208 #> PCTSUPP 0.2632 0.0772 20000 0.1041 0.4102"},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"heteroskedasticity-consistent-approach-hc3-1","dir":"Articles","previous_headings":"Example > Standardized Regression Slopes","what":"Heteroskedasticity Consistent Approach (HC3)","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"","code":"BetaMC(hc3, alpha = 0.05) #> Call: #> BetaMC(object = hc3, alpha = 0.05) #>  #> Standardized regression slopes #> type = \"hc3\" #>            est     se     R   2.5%  97.5% #> NARTIC  0.4951 0.0796 20000 0.3251 0.6375 #> PCTGRT  0.3915 0.0820 20000 0.2191 0.5388 #> PCTSUPP 0.2632 0.0856 20000 0.0904 0.4277"},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"other-effect-sizes","dir":"Articles","previous_headings":"Example","what":"Other Effect Sizes","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"betaMC package also functions generate Monte Carlo confidence intervals effect sizes RSqMC() multiple correlation coefficients (R-squared adjusted R-squared), DeltaRSqMC() improvement R-squared, SCorMC() semipartial correlation coefficients, PCorMC() squared partial correlation coefficients, DiffBetaMC() differences standardized regression coefficients.","code":""},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"multiple-correlation-coefficients-r-squared-and-adjusted-r-squared","dir":"Articles","previous_headings":"Example > Other Effect Sizes","what":"Multiple Correlation Coefficients (R-squared and adjusted R-squared)","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"","code":"RSqMC(hc3, alpha = 0.05) #> Call: #> RSqMC(object = hc3, alpha = 0.05) #>  #> R-squared and adjusted R-squared #> type = \"hc3\" #>        est     se     R   2.5%  97.5% #> rsq 0.8045 0.0620 20000 0.6466 0.8883 #> adj 0.7906 0.0664 20000 0.6214 0.8803"},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"improvement-in-r-squared","dir":"Articles","previous_headings":"Example > Other Effect Sizes","what":"Improvement in R-squared","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"","code":"DeltaRSqMC(hc3, alpha = 0.05) #> Call: #> DeltaRSqMC(object = hc3, alpha = 0.05) #>  #> Improvement in R-squared #> type = \"hc3\" #>            est     se     R   2.5%  97.5% #> NARTIC  0.1859 0.0694 20000 0.0499 0.3235 #> PCTGRT  0.1177 0.0543 20000 0.0250 0.2349 #> PCTSUPP 0.0569 0.0378 20000 0.0062 0.1509"},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"semipartial-correlation-coefficients","dir":"Articles","previous_headings":"Example > Other Effect Sizes","what":"Semipartial Correlation Coefficients","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"","code":"SCorMC(hc3, alpha = 0.05) #> Call: #> SCorMC(object = hc3, alpha = 0.05) #>  #> Semipartial correlations #> type = \"hc3\" #>            est     se     R   2.5%  97.5% #> NARTIC  0.4312 0.0872 20000 0.2235 0.5688 #> PCTGRT  0.3430 0.0830 20000 0.1583 0.4846 #> PCTSUPP 0.2385 0.0784 20000 0.0784 0.3885"},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"squared-partial-correlation-coefficients","dir":"Articles","previous_headings":"Example > Other Effect Sizes","what":"Squared Partial Correlation Coefficients","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"","code":"PCorMC(hc3, alpha = 0.05) #> Call: #> PCorMC(object = hc3, alpha = 0.05) #>  #> Squared partial correlations #> type = \"hc3\" #>            est     se     R   2.5%  97.5% #> NARTIC  0.4874 0.1197 20000 0.1751 0.6493 #> PCTGRT  0.3757 0.1155 20000 0.1043 0.5530 #> PCTSUPP 0.2254 0.1126 20000 0.0254 0.4569"},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"differences-of-standardized-regression-coefficients","dir":"Articles","previous_headings":"Example > Other Effect Sizes","what":"Differences of Standardized Regression Coefficients","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"","code":"DiffBetaMC(hc3, alpha = 0.05) #> Call: #> DiffBetaMC(object = hc3, alpha = 0.05) #>  #> Differences of standardized regression slopes #> type = \"hc3\" #>                   est     se     R    2.5%  97.5% #> NARTIC-PCTGRT  0.1037 0.1418 20000 -0.1736 0.3791 #> NARTIC-PCTSUPP 0.2319 0.1331 20000 -0.0378 0.4826 #> PCTGRT-PCTSUPP 0.1282 0.1372 20000 -0.1464 0.3871"},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"documentation","dir":"Articles","previous_headings":"","what":"Documentation","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"See GitHub Pages package documentation.","code":""},{"path":"https://github.com/jeksterslab/betaMC/articles/betaMC.html","id":"citation","dir":"Articles","previous_headings":"","what":"Citation","title":"betaMC: Monte Carlo for Regression Effect Sizes","text":"cite betaMC publications, please cite Pesigan & Cheung (2023).","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-beta-mc.html","id":"regression","dir":"Articles","previous_headings":"","what":"Regression","title":"betaMC: Example Using the BetaMC Function","text":"Fit regression model using lm() function.","code":"object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = df)"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-beta-mc.html","id":"normal-theory-approach","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Normal-Theory Approach","title":"betaMC: Example Using the BetaMC Function","text":"","code":"mvn <- MC(object, type = \"mvn\")"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-beta-mc.html","id":"asymptotic-distribution-free-approach","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Asymptotic distribution-free Approach","title":"betaMC: Example Using the BetaMC Function","text":"","code":"adf <- MC(object, type = \"adf\")"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-beta-mc.html","id":"heteroskedasticity-consistent-approach-hc3","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Heteroskedasticity Consistent Approach (HC3)","title":"betaMC: Example Using the BetaMC Function","text":"","code":"hc3 <- MC(object, type = \"hc3\")"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-beta-mc.html","id":"normal-theory-approach-1","dir":"Articles","previous_headings":"Standardized Regression Slopes","what":"Normal-Theory Approach","title":"betaMC: Example Using the BetaMC Function","text":"","code":"mvn <- BetaMC(mvn)"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-beta-mc.html","id":"asymptotic-distribution-free-approach-1","dir":"Articles","previous_headings":"Standardized Regression Slopes","what":"Asymptotic distribution-free Approach","title":"betaMC: Example Using the BetaMC Function","text":"","code":"adf <- BetaMC(adf)"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-beta-mc.html","id":"heteroskedasticity-consistent-approach-hc3-1","dir":"Articles","previous_headings":"Standardized Regression Slopes","what":"Heteroskedasticity Consistent Approach (HC3)","title":"betaMC: Example Using the BetaMC Function","text":"","code":"hc3 <- BetaMC(hc3)"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-beta-mc.html","id":"summary","dir":"Articles","previous_headings":"Methods","what":"summary","title":"betaMC: Example Using the BetaMC Function","text":"Summary results BetaMC().","code":"summary(mvn) #> Call: #> BetaMC(object = mvn) #>  #> Standardized regression slopes #> type = \"mvn\" #>            est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> NARTIC  0.4951 0.0757 20000 0.2505 0.2922 0.3388 0.6335 0.6806 0.7295 #> PCTGRT  0.3915 0.0769 20000 0.1443 0.1934 0.2379 0.5399 0.5906 0.6539 #> PCTSUPP 0.2632 0.0749 20000 0.0296 0.0791 0.1171 0.4125 0.4593 0.5091 summary(adf) #> Call: #> BetaMC(object = adf) #>  #> Standardized regression slopes #> type = \"adf\" #>            est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> NARTIC  0.4951 0.0676 20000 0.2581 0.3091 0.3518 0.6158 0.6558 0.6931 #> PCTGRT  0.3915 0.0711 20000 0.1283 0.1942 0.2411 0.5188 0.5575 0.6031 #> PCTSUPP 0.2632 0.0768 20000 0.0136 0.0596 0.1084 0.4085 0.4548 0.5068 summary(hc3) #> Call: #> BetaMC(object = hc3) #>  #> Standardized regression slopes #> type = \"hc3\" #>            est     se     R   0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> NARTIC  0.4951 0.0795 20000  0.2178 0.2688 0.3227 0.6340 0.6750 0.7254 #> PCTGRT  0.3915 0.0825 20000  0.0960 0.1575 0.2169 0.5406 0.5855 0.6364 #> PCTSUPP 0.2632 0.0855 20000 -0.0308 0.0280 0.0891 0.4286 0.4790 0.5415"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-beta-mc.html","id":"coef","dir":"Articles","previous_headings":"Methods","what":"coef","title":"betaMC: Example Using the BetaMC Function","text":"Return vector estimates.","code":"coef(mvn) #>    NARTIC    PCTGRT   PCTSUPP  #> 0.4951451 0.3914887 0.2632477 coef(adf) #>    NARTIC    PCTGRT   PCTSUPP  #> 0.4951451 0.3914887 0.2632477 coef(hc3) #>    NARTIC    PCTGRT   PCTSUPP  #> 0.4951451 0.3914887 0.2632477"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-beta-mc.html","id":"vcov","dir":"Articles","previous_headings":"Methods","what":"vcov","title":"betaMC: Example Using the BetaMC Function","text":"Return sampling covariance matrix.","code":"vcov(mvn) #>               NARTIC       PCTGRT     PCTSUPP #> NARTIC   0.005728673 -0.003274517 -0.00217137 #> PCTGRT  -0.003274517  0.005910844 -0.00172188 #> PCTSUPP -0.002171370 -0.001721880  0.00560837 vcov(adf) #>               NARTIC       PCTGRT      PCTSUPP #> NARTIC   0.004575329 -0.002529997 -0.001687205 #> PCTGRT  -0.002529997  0.005059420 -0.001914164 #> PCTSUPP -0.001687205 -0.001914164  0.005892514 vcov(hc3) #>               NARTIC       PCTGRT      PCTSUPP #> NARTIC   0.006321374 -0.003626786 -0.001968423 #> PCTGRT  -0.003626786  0.006802700 -0.002326675 #> PCTSUPP -0.001968423 -0.002326675  0.007317339"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-beta-mc.html","id":"confint","dir":"Articles","previous_headings":"Methods","what":"confint","title":"betaMC: Example Using the BetaMC Function","text":"Return confidence intervals.","code":"confint(mvn, level = 0.95) #>             2.5 %    97.5 % #> NARTIC  0.3387912 0.6334927 #> PCTGRT  0.2379335 0.5399119 #> PCTSUPP 0.1171396 0.4124892 confint(adf, level = 0.95) #>             2.5 %    97.5 % #> NARTIC  0.3518445 0.6157971 #> PCTGRT  0.2411247 0.5187594 #> PCTSUPP 0.1084217 0.4084592 confint(hc3, level = 0.95) #>              2.5 %    97.5 % #> NARTIC  0.32271018 0.6340491 #> PCTGRT  0.21693842 0.5406124 #> PCTSUPP 0.08911981 0.4285834"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-delta-r-sq-mc.html","id":"regression","dir":"Articles","previous_headings":"","what":"Regression","title":"betaMC: Example Using the DeltaRSqMC Function","text":"Fit regression model using lm() function.","code":"object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = df)"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-delta-r-sq-mc.html","id":"normal-theory-approach","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Normal-Theory Approach","title":"betaMC: Example Using the DeltaRSqMC Function","text":"","code":"mvn <- MC(object, type = \"mvn\")"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-delta-r-sq-mc.html","id":"asymptotic-distribution-free-approach","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Asymptotic distribution-free Approach","title":"betaMC: Example Using the DeltaRSqMC Function","text":"","code":"adf <- MC(object, type = \"adf\")"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-delta-r-sq-mc.html","id":"heteroskedasticity-consistent-approach-hc3","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Heteroskedasticity Consistent Approach (HC3)","title":"betaMC: Example Using the DeltaRSqMC Function","text":"","code":"hc3 <- MC(object, type = \"hc3\")"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-delta-r-sq-mc.html","id":"normal-theory-approach-1","dir":"Articles","previous_headings":"Improvement in R-squared","what":"Normal-Theory Approach","title":"betaMC: Example Using the DeltaRSqMC Function","text":"","code":"mvn <- DeltaRSqMC(mvn)"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-delta-r-sq-mc.html","id":"asymptotic-distribution-free-approach-1","dir":"Articles","previous_headings":"Improvement in R-squared","what":"Asymptotic distribution-free Approach","title":"betaMC: Example Using the DeltaRSqMC Function","text":"","code":"adf <- DeltaRSqMC(adf)"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-delta-r-sq-mc.html","id":"heteroskedasticity-consistent-approach-hc3-1","dir":"Articles","previous_headings":"Improvement in R-squared","what":"Heteroskedasticity Consistent Approach (HC3)","title":"betaMC: Example Using the DeltaRSqMC Function","text":"","code":"hc3 <- DeltaRSqMC(hc3)"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-delta-r-sq-mc.html","id":"summary","dir":"Articles","previous_headings":"Methods","what":"summary","title":"betaMC: Example Using the DeltaRSqMC Function","text":"Summary results DeltaRSqMC().","code":"summary(mvn) #> Call: #> DeltaRSqMC(object = mvn) #>  #> Improvement in R-squared #> type = \"mvn\" #>            est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> NARTIC  0.1859 0.0659 20000 0.0339 0.0529 0.0739 0.3298 0.3903 0.4734 #> PCTGRT  0.1177 0.0502 20000 0.0146 0.0245 0.0375 0.2310 0.2839 0.3537 #> PCTSUPP 0.0569 0.0338 20000 0.0005 0.0049 0.0105 0.1392 0.1838 0.2408 summary(adf) #> Call: #> DeltaRSqMC(object = adf) #>  #> Improvement in R-squared #> type = \"adf\" #>            est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> NARTIC  0.1859 0.0581 20000 0.0097 0.0489 0.0752 0.3003 0.3580 0.4070 #> PCTGRT  0.1177 0.0472 20000 0.0046 0.0221 0.0377 0.2201 0.2664 0.3187 #> PCTSUPP 0.0569 0.0332 20000 0.0001 0.0027 0.0094 0.1358 0.1748 0.2280 summary(hc3) #> Call: #> DeltaRSqMC(object = hc3) #>  #> Improvement in R-squared #> type = \"hc3\" #>            est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> NARTIC  0.1859 0.0692 20000 0.0023 0.0184 0.0515 0.3248 0.3809 0.4458 #> PCTGRT  0.1177 0.0545 20000 0.0014 0.0106 0.0253 0.2335 0.2946 0.3699 #> PCTSUPP 0.0569 0.0371 20000 0.0000 0.0009 0.0064 0.1481 0.1915 0.2512"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-delta-r-sq-mc.html","id":"coef","dir":"Articles","previous_headings":"Methods","what":"coef","title":"betaMC: Example Using the DeltaRSqMC Function","text":"Return vector estimates.","code":"coef(mvn) #>    NARTIC    PCTGRT   PCTSUPP  #> 0.1858925 0.1176542 0.0568722 coef(adf) #>    NARTIC    PCTGRT   PCTSUPP  #> 0.1858925 0.1176542 0.0568722 coef(hc3) #>    NARTIC    PCTGRT   PCTSUPP  #> 0.1858925 0.1176542 0.0568722"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-delta-r-sq-mc.html","id":"vcov","dir":"Articles","previous_headings":"Methods","what":"vcov","title":"betaMC: Example Using the DeltaRSqMC Function","text":"Return sampling covariance matrix.","code":"vcov(mvn) #>                NARTIC        PCTGRT       PCTSUPP #> NARTIC   0.0043455490 -0.0006801002 -0.0003696893 #> PCTGRT  -0.0006801002  0.0025173803 -0.0002202842 #> PCTSUPP -0.0003696893 -0.0002202842  0.0011451284 vcov(adf) #>                NARTIC        PCTGRT       PCTSUPP #> NARTIC   3.379889e-03  5.092173e-05 -0.0001512333 #> PCTGRT   5.092173e-05  2.225564e-03 -0.0002029492 #> PCTSUPP -1.512333e-04 -2.029492e-04  0.0010998069 vcov(hc3) #>                NARTIC        PCTGRT       PCTSUPP #> NARTIC   4.788222e-03  0.0001538195 -4.507066e-05 #> PCTGRT   1.538195e-04  0.0029736750 -1.529763e-04 #> PCTSUPP -4.507066e-05 -0.0001529763  1.379934e-03"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-delta-r-sq-mc.html","id":"confint","dir":"Articles","previous_headings":"Methods","what":"confint","title":"betaMC: Example Using the DeltaRSqMC Function","text":"Return confidence intervals.","code":"confint(mvn, level = 0.95) #>              2.5 %    97.5 % #> NARTIC  0.07386170 0.3297849 #> PCTGRT  0.03749633 0.2309612 #> PCTSUPP 0.01047138 0.1392182 confint(adf, level = 0.95) #>               2.5 %    97.5 % #> NARTIC  0.075164259 0.3003049 #> PCTGRT  0.037725234 0.2201009 #> PCTSUPP 0.009441678 0.1358350 confint(hc3, level = 0.95) #>               2.5 %    97.5 % #> NARTIC  0.051473692 0.3247711 #> PCTGRT  0.025274144 0.2334934 #> PCTSUPP 0.006361168 0.1481070"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-diff-beta-mc.html","id":"regression","dir":"Articles","previous_headings":"","what":"Regression","title":"betaMC: Example Using the DiffBetaMC Function","text":"Fit regression model using lm() function.","code":"object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = df)"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-diff-beta-mc.html","id":"normal-theory-approach","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Normal-Theory Approach","title":"betaMC: Example Using the DiffBetaMC Function","text":"","code":"mvn <- MC(object, type = \"mvn\")"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-diff-beta-mc.html","id":"asymptotic-distribution-free-approach","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Asymptotic distribution-free Approach","title":"betaMC: Example Using the DiffBetaMC Function","text":"","code":"adf <- MC(object, type = \"adf\")"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-diff-beta-mc.html","id":"heteroskedasticity-consistent-approach-hc3","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Heteroskedasticity Consistent Approach (HC3)","title":"betaMC: Example Using the DiffBetaMC Function","text":"","code":"hc3 <- MC(object, type = \"hc3\")"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-diff-beta-mc.html","id":"normal-theory-approach-1","dir":"Articles","previous_headings":"Differences of Standardized Regression Slopes","what":"Normal-Theory Approach","title":"betaMC: Example Using the DiffBetaMC Function","text":"","code":"mvn <- DiffBetaMC(mvn)"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-diff-beta-mc.html","id":"asymptotic-distribution-free-approach-1","dir":"Articles","previous_headings":"Differences of Standardized Regression Slopes","what":"Asymptotic distribution-free Approach","title":"betaMC: Example Using the DiffBetaMC Function","text":"","code":"adf <- DiffBetaMC(adf)"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-diff-beta-mc.html","id":"heteroskedasticity-consistent-approach-hc3-1","dir":"Articles","previous_headings":"Differences of Standardized Regression Slopes","what":"Heteroskedasticity Consistent Approach (HC3)","title":"betaMC: Example Using the DiffBetaMC Function","text":"","code":"hc3 <- DiffBetaMC(hc3)"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-diff-beta-mc.html","id":"summary","dir":"Articles","previous_headings":"Methods","what":"summary","title":"betaMC: Example Using the DiffBetaMC Function","text":"Summary results DiffBetaMC().","code":"summary(mvn) #> Call: #> DiffBetaMC(object = mvn) #>  #> Differences of standardized regression slopes #> type = \"mvn\" #>                   est     se     R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> NARTIC-PCTGRT  0.1037 0.1361 20000 -0.3471 -0.2551 -0.1697 0.3643 0.4455 0.5263 #> NARTIC-PCTSUPP 0.2319 0.1251 20000 -0.2087 -0.1026 -0.0210 0.4704 0.5340 0.6083 #> PCTGRT-PCTSUPP 0.1282 0.1231 20000 -0.2893 -0.1978 -0.1178 0.3667 0.4445 0.5213 summary(adf) #> Call: #> DiffBetaMC(object = adf) #>  #> Differences of standardized regression slopes #> type = \"adf\" #>                   est     se     R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> NARTIC-PCTGRT  0.1037 0.1211 20000 -0.3039 -0.2089 -0.1365 0.3385 0.4044 0.4865 #> NARTIC-PCTSUPP 0.2319 0.1185 20000 -0.1493 -0.0722 -0.0038 0.4561 0.5372 0.6326 #> PCTGRT-PCTSUPP 0.1282 0.1220 20000 -0.2671 -0.1939 -0.1157 0.3636 0.4389 0.5356 summary(hc3) #> Call: #> DiffBetaMC(object = hc3) #>  #> Differences of standardized regression slopes #> type = \"hc3\" #>                   est     se     R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> NARTIC-PCTGRT  0.1037 0.1426 20000 -0.3745 -0.2614 -0.1776 0.3822 0.4744 0.5792 #> NARTIC-PCTSUPP 0.2319 0.1327 20000 -0.2162 -0.1194 -0.0375 0.4802 0.5706 0.6508 #> PCTGRT-PCTSUPP 0.1282 0.1375 20000 -0.3462 -0.2461 -0.1524 0.3927 0.4751 0.5525"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-diff-beta-mc.html","id":"coef","dir":"Articles","previous_headings":"Methods","what":"coef","title":"betaMC: Example Using the DiffBetaMC Function","text":"Return vector estimates.","code":"coef(mvn) #>  NARTIC-PCTGRT NARTIC-PCTSUPP PCTGRT-PCTSUPP  #>      0.1036564      0.2318974      0.1282410 coef(adf) #>  NARTIC-PCTGRT NARTIC-PCTSUPP PCTGRT-PCTSUPP  #>      0.1036564      0.2318974      0.1282410 coef(hc3) #>  NARTIC-PCTGRT NARTIC-PCTSUPP PCTGRT-PCTSUPP  #>      0.1036564      0.2318974      0.1282410"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-diff-beta-mc.html","id":"vcov","dir":"Articles","previous_headings":"Methods","what":"vcov","title":"betaMC: Example Using the DiffBetaMC Function","text":"Return sampling covariance matrix.","code":"vcov(mvn) #>                NARTIC-PCTGRT NARTIC-PCTSUPP PCTGRT-PCTSUPP #> NARTIC-PCTGRT    0.018515016    0.009505913   -0.009009102 #> NARTIC-PCTSUPP   0.009505913    0.015641359    0.006135446 #> PCTGRT-PCTSUPP  -0.009009102    0.006135446    0.015144548 vcov(adf) #>                NARTIC-PCTGRT NARTIC-PCTSUPP PCTGRT-PCTSUPP #> NARTIC-PCTGRT    0.014655011    0.006898176   -0.007756835 #> NARTIC-PCTSUPP   0.006898176    0.014034195    0.007136020 #> PCTGRT-PCTSUPP  -0.007756835    0.007136020    0.014892855 vcov(hc3) #>                NARTIC-PCTGRT NARTIC-PCTSUPP PCTGRT-PCTSUPP #> NARTIC-PCTGRT    0.020329109    0.009517481   -0.010811628 #> NARTIC-PCTSUPP   0.009517481    0.017601995    0.008084514 #> PCTGRT-PCTSUPP  -0.010811628    0.008084514    0.018896142"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-diff-beta-mc.html","id":"confint","dir":"Articles","previous_headings":"Methods","what":"confint","title":"betaMC: Example Using the DiffBetaMC Function","text":"Return confidence intervals.","code":"confint(mvn, level = 0.95) #>                      2.5 %    97.5 % #> NARTIC-PCTGRT  -0.16970725 0.3643304 #> NARTIC-PCTSUPP -0.02102608 0.4703601 #> PCTGRT-PCTSUPP -0.11775485 0.3667414 confint(adf, level = 0.95) #>                       2.5 %    97.5 % #> NARTIC-PCTGRT  -0.136506630 0.3385427 #> NARTIC-PCTSUPP -0.003803225 0.4561149 #> PCTGRT-PCTSUPP -0.115719656 0.3635715 confint(hc3, level = 0.95) #>                     2.5 %    97.5 % #> NARTIC-PCTGRT  -0.1776168 0.3822032 #> NARTIC-PCTSUPP -0.0374553 0.4802119 #> PCTGRT-PCTSUPP -0.1523831 0.3927320"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-mc-mi.html","id":"multiple-imputation","dir":"Articles","previous_headings":"","what":"Multiple Imputation","title":"betaMC: Monte Carlo Method Combined with Multiple Imputation","text":"","code":"mi <- mice::mice(   df,   m = 100,   seed = 42,   print = FALSE )"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-mc-mi.html","id":"regression","dir":"Articles","previous_headings":"","what":"Regression","title":"betaMC: Monte Carlo Method Combined with Multiple Imputation","text":"Fit regression model using lm() function. Note deal missing values. fitted model (object) updated imputed data within MCMI() function.","code":"object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = df)"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-mc-mi.html","id":"monte-carlo-sampling-distribution-of-parameters","dir":"Articles","previous_headings":"","what":"Monte Carlo Sampling Distribution of Parameters","title":"betaMC: Monte Carlo Method Combined with Multiple Imputation","text":"","code":"hc3 <- MCMI(object, mi = mi, type = \"hc3\")"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-mc-mi.html","id":"standardized-regression-slopes","dir":"Articles","previous_headings":"","what":"Standardized Regression Slopes","title":"betaMC: Monte Carlo Method Combined with Multiple Imputation","text":"","code":"BetaMC(hc3) #> Call: #> BetaMC(object = hc3) #>  #> Standardized regression slopes #> type = \"hc3\" #>            est     se     R   0.05%    0.5%   2.5%  97.5%  99.5% 99.95% #> NARTIC  0.5197 0.0787 20000  0.2267  0.3008 0.3499 0.6579 0.7014 0.7456 #> PCTGRT  0.4017 0.0859 20000  0.1058  0.1705 0.2270 0.5636 0.6125 0.6778 #> PCTSUPP 0.2327 0.0905 20000 -0.0861 -0.0144 0.0484 0.4024 0.4546 0.5359"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-mc-mi.html","id":"multiple-correlation-coefficients","dir":"Articles","previous_headings":"","what":"Multiple Correlation Coefficients","title":"betaMC: Monte Carlo Method Combined with Multiple Imputation","text":"","code":"RSqMC(hc3) #> Call: #> RSqMC(object = hc3) #>  #> R-squared and adjusted R-squared #> type = \"hc3\" #>        est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> rsq 0.8154 0.0610 20000 0.5097 0.5978 0.6583 0.8976 0.9217 0.9451 #> adj 0.8022 0.0671 20000 0.4607 0.5575 0.6241 0.8873 0.9138 0.9396"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-mc-mi.html","id":"improvement-in-r-squared","dir":"Articles","previous_headings":"","what":"Improvement in R-squared","title":"betaMC: Monte Carlo Method Combined with Multiple Imputation","text":"","code":"DeltaRSqMC(hc3) #> Call: #> DeltaRSqMC(object = hc3) #>  #> Improvement in R-squared #> type = \"hc3\" #>            est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> NARTIC  0.2070 0.0717 20000 0.0032 0.0243 0.0601 0.3448 0.4013 0.4730 #> PCTGRT  0.1270 0.0614 20000 0.0016 0.0108 0.0275 0.2654 0.3265 0.4089 #> PCTSUPP 0.0435 0.0346 20000 0.0000 0.0002 0.0019 0.1301 0.1736 0.2534"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-mc-mi.html","id":"semipartial-correlation-coefficients","dir":"Articles","previous_headings":"","what":"Semipartial Correlation Coefficients","title":"betaMC: Monte Carlo Method Combined with Multiple Imputation","text":"","code":"SCorMC(hc3) #> Call: #> SCorMC(object = hc3) #>  #> Semipartial correlations #> type = \"hc3\" #>            est     se     R   0.05%    0.5%   2.5%  97.5%  99.5% 99.95% #> NARTIC  0.4549 0.0858 20000  0.0570  0.1559 0.2451 0.5872 0.6335 0.6878 #> PCTGRT  0.3564 0.0890 20000  0.0396  0.1038 0.1657 0.5152 0.5714 0.6395 #> PCTSUPP 0.2085 0.0816 20000 -0.0751 -0.0124 0.0420 0.3607 0.4167 0.5034"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-mc-mi.html","id":"squared-partial-correlation-coefficients","dir":"Articles","previous_headings":"","what":"Squared Partial Correlation Coefficients","title":"betaMC: Monte Carlo Method Combined with Multiple Imputation","text":"","code":"PCorMC(hc3) #> Call: #> PCorMC(object = hc3) #>  #> Squared partial correlations #> type = \"hc3\" #>            est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> NARTIC  0.5289 0.1169 20000 0.0159 0.0969 0.2207 0.6855 0.7432 0.7962 #> PCTGRT  0.4082 0.1221 20000 0.0080 0.0551 0.1228 0.5953 0.6606 0.7452 #> PCTSUPP 0.1917 0.1148 20000 0.0000 0.0007 0.0085 0.4390 0.5307 0.6277"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-mc-mi.html","id":"differences-of-standardized-regression-slopes","dir":"Articles","previous_headings":"","what":"Differences of Standardized Regression Slopes","title":"betaMC: Monte Carlo Method Combined with Multiple Imputation","text":"","code":"DiffBetaMC(hc3) #> Call: #> DiffBetaMC(object = hc3) #>  #> Differences of standardized regression slopes #> type = \"hc3\" #>                   est     se     R   0.05%    0.5%    2.5%  97.5%  99.5% 99.95% #> NARTIC-PCTGRT  0.1179 0.1441 20000 -0.3857 -0.2584 -0.1715 0.3922 0.4777 0.5928 #> NARTIC-PCTSUPP 0.2869 0.1376 20000 -0.1701 -0.0728  0.0073 0.5486 0.6278 0.7173 #> PCTGRT-PCTSUPP 0.1690 0.1430 20000 -0.3190 -0.2025 -0.1103 0.4459 0.5356 0.6320"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-p-cor-mc.html","id":"regression","dir":"Articles","previous_headings":"","what":"Regression","title":"betaMC: Example Using the PCorMC Function","text":"Fit regression model using lm() function.","code":"object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = df)"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-p-cor-mc.html","id":"normal-theory-approach","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Normal-Theory Approach","title":"betaMC: Example Using the PCorMC Function","text":"","code":"mvn <- MC(object, type = \"mvn\")"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-p-cor-mc.html","id":"asymptotic-distribution-free-approach","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Asymptotic distribution-free Approach","title":"betaMC: Example Using the PCorMC Function","text":"","code":"adf <- MC(object, type = \"adf\")"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-p-cor-mc.html","id":"heteroskedasticity-consistent-approach-hc3","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Heteroskedasticity Consistent Approach (HC3)","title":"betaMC: Example Using the PCorMC Function","text":"","code":"hc3 <- MC(object, type = \"hc3\")"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-p-cor-mc.html","id":"normal-theory-approach-1","dir":"Articles","previous_headings":"Squared Partial Correlation Coefficients","what":"Normal-Theory Approach","title":"betaMC: Example Using the PCorMC Function","text":"","code":"mvn <- PCorMC(mvn)"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-p-cor-mc.html","id":"asymptotic-distribution-free-approach-1","dir":"Articles","previous_headings":"Squared Partial Correlation Coefficients","what":"Asymptotic distribution-free Approach","title":"betaMC: Example Using the PCorMC Function","text":"","code":"adf <- PCorMC(adf)"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-p-cor-mc.html","id":"heteroskedasticity-consistent-approach-hc3-1","dir":"Articles","previous_headings":"Squared Partial Correlation Coefficients","what":"Heteroskedasticity Consistent Approach (HC3)","title":"betaMC: Example Using the PCorMC Function","text":"","code":"hc3 <- PCorMC(hc3)"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-p-cor-mc.html","id":"summary","dir":"Articles","previous_headings":"Methods","what":"summary","title":"betaMC: Example Using the PCorMC Function","text":"Summary results PCorMC().","code":"summary(mvn) #> Call: #> PCorMC(object = mvn) #>  #> Squared partial correlations #> type = \"mvn\" #>            est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> NARTIC  0.4874 0.1053 20000 0.1127 0.1807 0.2430 0.6514 0.7086 0.7763 #> PCTGRT  0.3757 0.1073 20000 0.0500 0.1001 0.1474 0.5618 0.6249 0.7069 #> PCTSUPP 0.2254 0.0993 20000 0.0057 0.0198 0.0468 0.4281 0.5062 0.5782 summary(adf) #> Call: #> PCorMC(object = adf) #>  #> Squared partial correlations #> type = \"adf\" #>            est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> NARTIC  0.4874 0.0997 20000 0.0381 0.1502 0.2411 0.6329 0.6893 0.7518 #> PCTGRT  0.3757 0.1004 20000 0.0334 0.0880 0.1460 0.5378 0.5936 0.6666 #> PCTSUPP 0.2254 0.1029 20000 0.0005 0.0094 0.0368 0.4335 0.5047 0.5897 summary(hc3) #> Call: #> PCorMC(object = hc3) #>  #> Squared partial correlations #> type = \"hc3\" #>            est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> NARTIC  0.4874 0.1185 20000 0.0101 0.0747 0.1802 0.6484 0.7076 0.7726 #> PCTGRT  0.3757 0.1152 20000 0.0068 0.0483 0.1071 0.5536 0.6167 0.6846 #> PCTSUPP 0.2254 0.1138 20000 0.0001 0.0034 0.0248 0.4577 0.5465 0.6468"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-p-cor-mc.html","id":"coef","dir":"Articles","previous_headings":"Methods","what":"coef","title":"betaMC: Example Using the PCorMC Function","text":"Return vector estimates.","code":"coef(mvn) #>    NARTIC    PCTGRT   PCTSUPP  #> 0.4874382 0.3757383 0.2253739 coef(adf) #>    NARTIC    PCTGRT   PCTSUPP  #> 0.4874382 0.3757383 0.2253739 coef(hc3) #>    NARTIC    PCTGRT   PCTSUPP  #> 0.4874382 0.3757383 0.2253739"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-p-cor-mc.html","id":"vcov","dir":"Articles","previous_headings":"Methods","what":"vcov","title":"betaMC: Example Using the PCorMC Function","text":"Return sampling covariance matrix.","code":"vcov(mvn) #>               NARTIC       PCTGRT      PCTSUPP #> NARTIC  0.0110932147 0.0006673043 0.0004004950 #> PCTGRT  0.0006673043 0.0115040181 0.0001156673 #> PCTSUPP 0.0004004950 0.0001156673 0.0098550210 vcov(adf) #>              NARTIC       PCTGRT      PCTSUPP #> NARTIC  0.009937808 0.0024649569 0.0020029526 #> PCTGRT  0.002464957 0.0100806860 0.0007876848 #> PCTSUPP 0.002002953 0.0007876848 0.0105864956 vcov(hc3) #>              NARTIC      PCTGRT     PCTSUPP #> NARTIC  0.014033927 0.003688422 0.002908552 #> PCTGRT  0.003688422 0.013275149 0.001000406 #> PCTSUPP 0.002908552 0.001000406 0.012951539"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-p-cor-mc.html","id":"confint","dir":"Articles","previous_headings":"Methods","what":"confint","title":"betaMC: Example Using the PCorMC Function","text":"Return confidence intervals.","code":"confint(mvn, level = 0.95) #>              2.5 %    97.5 % #> NARTIC  0.24300742 0.6514329 #> PCTGRT  0.14741339 0.5617781 #> PCTSUPP 0.04678045 0.4280831 confint(adf, level = 0.95) #>              2.5 %    97.5 % #> NARTIC  0.24105542 0.6329125 #> PCTGRT  0.14596278 0.5377823 #> PCTSUPP 0.03683088 0.4334947 confint(hc3, level = 0.95) #>              2.5 %    97.5 % #> NARTIC  0.18024021 0.6484085 #> PCTGRT  0.10707071 0.5536133 #> PCTSUPP 0.02483994 0.4576693"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-r-sq-mc.html","id":"regression","dir":"Articles","previous_headings":"","what":"Regression","title":"betaMC: Example Using the RSqMC Function","text":"Fit regression model using lm() function.","code":"object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = df)"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-r-sq-mc.html","id":"normal-theory-approach","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Normal-Theory Approach","title":"betaMC: Example Using the RSqMC Function","text":"","code":"mvn <- MC(object, type = \"mvn\")"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-r-sq-mc.html","id":"asymptotic-distribution-free-approach","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Asymptotic distribution-free Approach","title":"betaMC: Example Using the RSqMC Function","text":"","code":"adf <- MC(object, type = \"adf\")"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-r-sq-mc.html","id":"heteroskedasticity-consistent-approach-hc3","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Heteroskedasticity Consistent Approach (HC3)","title":"betaMC: Example Using the RSqMC Function","text":"","code":"hc3 <- MC(object, type = \"hc3\")"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-r-sq-mc.html","id":"normal-theory-approach-1","dir":"Articles","previous_headings":"Multiple Correlation Coefficients","what":"Normal-Theory Approach","title":"betaMC: Example Using the RSqMC Function","text":"","code":"mvn <- RSqMC(mvn)"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-r-sq-mc.html","id":"asymptotic-distribution-free-approach-1","dir":"Articles","previous_headings":"Multiple Correlation Coefficients","what":"Asymptotic distribution-free Approach","title":"betaMC: Example Using the RSqMC Function","text":"","code":"adf <- RSqMC(adf)"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-r-sq-mc.html","id":"heteroskedasticity-consistent-approach-hc3-1","dir":"Articles","previous_headings":"Multiple Correlation Coefficients","what":"Heteroskedasticity Consistent Approach (HC3)","title":"betaMC: Example Using the RSqMC Function","text":"","code":"hc3 <- RSqMC(hc3)"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-r-sq-mc.html","id":"summary","dir":"Articles","previous_headings":"Methods","what":"summary","title":"betaMC: Example Using the RSqMC Function","text":"Summary results RSqMC().","code":"summary(mvn) #> Call: #> RSqMC(object = mvn) #>  #> R-squared and adjusted R-squared #> type = \"mvn\" #>        est     se     R  0.05%   0.5%   2.5%  97.5% 99.5% 99.95% #> rsq 0.8045 0.0557 20000 0.5087 0.5978 0.6625 0.8806 0.901 0.9233 #> adj 0.7906 0.0597 20000 0.4736 0.5691 0.6383 0.8721 0.894 0.9179 summary(adf) #> Call: #> RSqMC(object = adf) #>  #> R-squared and adjusted R-squared #> type = \"adf\" #>        est     se     R  0.05%   0.5%   2.5%  97.5% 99.5% 99.95% #> rsq 0.8045 0.0546 20000 0.5430 0.6171 0.6661 0.8797 0.902 0.9217 #> adj 0.7906 0.0585 20000 0.5104 0.5897 0.6423 0.8711 0.895 0.9161 summary(hc3) #> Call: #> RSqMC(object = hc3) #>  #> R-squared and adjusted R-squared #> type = \"hc3\" #>        est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> rsq 0.8045 0.0617 20000 0.4685 0.5803 0.6479 0.8877 0.9110 0.9382 #> adj 0.7906 0.0661 20000 0.4306 0.5503 0.6227 0.8797 0.9047 0.9338"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-r-sq-mc.html","id":"coef","dir":"Articles","previous_headings":"Methods","what":"coef","title":"betaMC: Example Using the RSqMC Function","text":"Return vector estimates.","code":"coef(mvn) #>       rsq       adj  #> 0.8045263 0.7905638 coef(adf) #>       rsq       adj  #> 0.8045263 0.7905638 coef(hc3) #>       rsq       adj  #> 0.8045263 0.7905638"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-r-sq-mc.html","id":"vcov","dir":"Articles","previous_headings":"Methods","what":"vcov","title":"betaMC: Example Using the RSqMC Function","text":"Return sampling covariance matrix.","code":"vcov(mvn) #>             rsq         adj #> rsq 0.003106134 0.003328000 #> adj 0.003328000 0.003565715 vcov(adf) #>             rsq         adj #> rsq 0.002981289 0.003194238 #> adj 0.003194238 0.003422398 vcov(hc3) #>             rsq         adj #> rsq 0.003810908 0.004083116 #> adj 0.004083116 0.004374767"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-r-sq-mc.html","id":"confint","dir":"Articles","previous_headings":"Methods","what":"confint","title":"betaMC: Example Using the RSqMC Function","text":"Return confidence intervals.","code":"confint(mvn, level = 0.95) #>         2.5 %    97.5 % #> rsq 0.6624561 0.8806183 #> adj 0.6383458 0.8720910 confint(adf, level = 0.95) #>         2.5 %    97.5 % #> rsq 0.6661151 0.8796919 #> adj 0.6422662 0.8710985 confint(hc3, level = 0.95) #>         2.5 %    97.5 % #> rsq 0.6478883 0.8877497 #> adj 0.6227375 0.8797318"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-s-cor-mc.html","id":"regression","dir":"Articles","previous_headings":"","what":"Regression","title":"betaMC: Example Using the SCorMC Function","text":"Fit regression model using lm() function.","code":"object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = df)"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-s-cor-mc.html","id":"normal-theory-approach","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Normal-Theory Approach","title":"betaMC: Example Using the SCorMC Function","text":"","code":"mvn <- MC(object, type = \"mvn\")"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-s-cor-mc.html","id":"asymptotic-distribution-free-approach","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Asymptotic distribution-free Approach","title":"betaMC: Example Using the SCorMC Function","text":"","code":"adf <- MC(object, type = \"adf\")"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-s-cor-mc.html","id":"heteroskedasticity-consistent-approach-hc3","dir":"Articles","previous_headings":"Monte Carlo Sampling Distribution of Parameters","what":"Heteroskedasticity Consistent Approach (HC3)","title":"betaMC: Example Using the SCorMC Function","text":"","code":"hc3 <- MC(object, type = \"hc3\")"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-s-cor-mc.html","id":"normal-theory-approach-1","dir":"Articles","previous_headings":"Semipartial Correlation Coefficients","what":"Normal-Theory Approach","title":"betaMC: Example Using the SCorMC Function","text":"","code":"mvn <- SCorMC(mvn)"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-s-cor-mc.html","id":"asymptotic-distribution-free-approach-1","dir":"Articles","previous_headings":"Semipartial Correlation Coefficients","what":"Asymptotic distribution-free Approach","title":"betaMC: Example Using the SCorMC Function","text":"","code":"adf <- SCorMC(adf)"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-s-cor-mc.html","id":"heteroskedasticity-consistent-approach-hc3-1","dir":"Articles","previous_headings":"Semipartial Correlation Coefficients","what":"Heteroskedasticity Consistent Approach (HC3)","title":"betaMC: Example Using the SCorMC Function","text":"","code":"hc3 <- SCorMC(hc3)"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/example-s-cor-mc.html","id":"summary","dir":"Articles","previous_headings":"Methods","what":"summary","title":"betaMC: Example Using the SCorMC Function","text":"Summary results SCorMC().","code":"summary(mvn) #> Call: #> SCorMC(object = mvn) #>  #> Semipartial correlations #> type = \"mvn\" #>            est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> NARTIC  0.4312 0.0770 20000 0.1705 0.2285 0.2707 0.5723 0.6244 0.6898 #> PCTGRT  0.3430 0.0744 20000 0.1191 0.1573 0.1949 0.4857 0.5435 0.6031 #> PCTSUPP 0.2385 0.0701 20000 0.0265 0.0644 0.1012 0.3771 0.4287 0.4858 summary(adf) #> Call: #> SCorMC(object = adf) #>  #> Semipartial correlations #> type = \"adf\" #>            est     se     R  0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> NARTIC  0.4312 0.0707 20000 0.0893 0.2103 0.2706 0.5477 0.5924 0.6456 #> PCTGRT  0.3430 0.0709 20000 0.0766 0.1453 0.1915 0.4688 0.5152 0.5804 #> PCTSUPP 0.2385 0.0697 20000 0.0013 0.0502 0.0951 0.3689 0.4170 0.4716 summary(hc3) #> Call: #> SCorMC(object = hc3) #>  #> Semipartial correlations #> type = \"hc3\" #>            est     se     R   0.05%   0.5%   2.5%  97.5%  99.5% 99.95% #> NARTIC  0.4312 0.0866 20000  0.0487 0.1407 0.2212 0.5669 0.6172 0.6788 #> PCTGRT  0.3430 0.0829 20000  0.0483 0.1056 0.1604 0.4874 0.5404 0.6068 #> PCTSUPP 0.2385 0.0790 20000 -0.0346 0.0246 0.0772 0.3889 0.4472 0.5182"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-s-cor-mc.html","id":"coef","dir":"Articles","previous_headings":"Methods","what":"coef","title":"betaMC: Example Using the SCorMC Function","text":"Return vector estimates.","code":"coef(mvn) #>    NARTIC    PCTGRT   PCTSUPP  #> 0.4311525 0.3430075 0.2384789 coef(adf) #>    NARTIC    PCTGRT   PCTSUPP  #> 0.4311525 0.3430075 0.2384789 coef(hc3) #>    NARTIC    PCTGRT   PCTSUPP  #> 0.4311525 0.3430075 0.2384789"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-s-cor-mc.html","id":"vcov","dir":"Articles","previous_headings":"Methods","what":"vcov","title":"betaMC: Example Using the SCorMC Function","text":"Return sampling covariance matrix.","code":"vcov(mvn) #>                NARTIC        PCTGRT       PCTSUPP #> NARTIC   0.0059274548 -0.0012167784 -0.0008618646 #> PCTGRT  -0.0012167784  0.0055324560 -0.0008342224 #> PCTSUPP -0.0008618646 -0.0008342224  0.0049195408 vcov(adf) #>                NARTIC        PCTGRT       PCTSUPP #> NARTIC   0.0049974108  0.0002634982 -0.0003690405 #> PCTGRT   0.0002634982  0.0050244640 -0.0005948999 #> PCTSUPP -0.0003690405 -0.0005948999  0.0048544551 vcov(hc3) #>                NARTIC        PCTGRT       PCTSUPP #> NARTIC   0.0075043369  0.0008426676 -0.0001716679 #> PCTGRT   0.0008426676  0.0068777169 -0.0006003425 #> PCTSUPP -0.0001716679 -0.0006003425  0.0062482399"},{"path":"https://github.com/jeksterslab/betaMC/articles/example-s-cor-mc.html","id":"confint","dir":"Articles","previous_headings":"Methods","what":"confint","title":"betaMC: Example Using the SCorMC Function","text":"Return confidence intervals.","code":"confint(mvn, level = 0.95) #>             2.5 %    97.5 % #> NARTIC  0.2706736 0.5723131 #> PCTGRT  0.1948593 0.4857045 #> PCTSUPP 0.1012490 0.3770589 confint(adf, level = 0.95) #>              2.5 %    97.5 % #> NARTIC  0.27063965 0.5476799 #> PCTGRT  0.19151714 0.4687909 #> PCTSUPP 0.09507793 0.3688795 confint(hc3, level = 0.95) #>             2.5 %    97.5 % #> NARTIC  0.2211816 0.5668765 #> PCTGRT  0.1604257 0.4874132 #> PCTSUPP 0.0771931 0.3889084"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/articles/session.html","id":"session","dir":"Articles","previous_headings":"","what":"Session","title":"betaMC: Session","text":"","code":"sessionInfo() #> R version 4.4.1 (2024-06-14) #> Platform: x86_64-pc-linux-gnu #> Running under: Ubuntu 22.04.4 LTS #>  #> Matrix products: default #> BLAS:   /usr/lib/x86_64-linux-gnu/openblas-pthread/libblas.so.3  #> LAPACK: /usr/lib/x86_64-linux-gnu/openblas-pthread/libopenblasp-r0.3.20.so;  LAPACK version 3.10.0 #>  #> locale: #>  [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               #>  [3] LC_TIME=en_US.UTF-8        LC_COLLATE=en_US.UTF-8     #>  [5] LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8    #>  [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  #>  [9] LC_ADDRESS=C               LC_TELEPHONE=C             #> [11] LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C        #>  #> time zone: Etc/UTC #> tzcode source: system (glibc) #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] microbenchmark_1.4.10 boot_1.3-30           betaMC_1.3.2.9000     #>  #> loaded via a namespace (and not attached): #>  [1] mitml_0.4-5      Matrix_1.7-0     glmnet_4.1-8     dplyr_1.1.4      #>  [5] compiler_4.4.1   highr_0.11       rpart_4.1.23     tidyselect_1.2.1 #>  [9] Rcpp_1.0.12      mice_3.16.0      tidyr_1.3.1      splines_4.4.1    #> [13] lattice_0.22-6   R6_2.5.1         generics_0.1.3   shape_1.4.6.1    #> [17] pan_1.9          knitr_1.47       MASS_7.3-60.2    iterators_1.0.14 #> [21] backports_1.5.0  tibble_3.2.1     nloptr_2.1.1     nnet_7.3-19      #> [25] rprojroot_2.0.4  minqa_1.2.7      pillar_1.9.0     rlang_1.1.4      #> [29] utf8_1.2.4       broom_1.0.6      xfun_0.45        cli_3.6.3.9000   #> [33] magrittr_2.0.3   jomo_2.7-6       foreach_1.5.2    grid_4.4.1       #> [37] rProject_0.0.13  lme4_1.1-35.4    nlme_3.1-164     lifecycle_1.0.4  #> [41] vctrs_0.6.5      evaluate_0.24.0  glue_1.7.0       codetools_0.2-20 #> [45] survival_3.6-4   fansi_1.0.6      purrr_1.0.2      tools_4.4.1      #> [49] pkgconfig_2.0.3"},{"path":"https://github.com/jeksterslab/betaMC/articles/session.html","id":"packages","dir":"Articles","previous_headings":"","what":"Packages","title":"betaMC: Session","text":"","code":"installed.packages()[, c(\"Package\", \"Version\")] #>                 Package           Version      #> Amelia          \"Amelia\"          \"1.8.2\"      #> betaMC          \"betaMC\"          \"1.3.2.9000\" #> pkgload         \"pkgload\"         \"1.4.0\"      #> ps              \"ps\"              \"1.7.7\"      #> roxygen2        \"roxygen2\"        \"7.3.2\"      #> rProject        \"rProject\"        \"0.0.13\"     #> tinytex         \"tinytex\"         \"0.51.1\"     #> abind           \"abind\"           \"1.4-5\"      #> arrow           \"arrow\"           \"16.1.0\"     #> ash             \"ash\"             \"1.0-15\"     #> AsioHeaders     \"AsioHeaders\"     \"1.22.1-2\"   #> askpass         \"askpass\"         \"1.2.0\"      #> assertthat      \"assertthat\"      \"0.2.1\"      #> backports       \"backports\"       \"1.5.0\"      #> base64enc       \"base64enc\"       \"0.1-3\"      #> betaDelta       \"betaDelta\"       \"1.0.5.9000\" #> betaMC          \"betaMC\"          \"1.3.2.9000\" #> betaNB          \"betaNB\"          \"1.0.4.9000\" #> betaSandwich    \"betaSandwich\"    \"1.0.7.9000\" #> BH              \"BH\"              \"1.84.0-0\"   #> bibtex          \"bibtex\"          \"0.5.1\"      #> BiocManager     \"BiocManager\"     \"1.30.23\"    #> bit             \"bit\"             \"4.0.5\"      #> bit64           \"bit64\"           \"4.0.5\"      #> bitops          \"bitops\"          \"1.0-7\"      #> blob            \"blob\"            \"1.2.4\"      #> brew            \"brew\"            \"1.0-10\"     #> brio            \"brio\"            \"1.1.5\"      #> broom           \"broom\"           \"1.0.6\"      #> bslib           \"bslib\"           \"0.7.0\"      #> cachem          \"cachem\"          \"1.1.0\"      #> callr           \"callr\"           \"3.7.6\"      #> car             \"car\"             \"3.1-2\"      #> caracas         \"caracas\"         \"2.1.1\"      #> carData         \"carData\"         \"3.0-5\"      #> cellranger      \"cellranger\"      \"1.1.0\"      #> cffr            \"cffr\"            \"1.0.1\"      #> checkmate       \"checkmate\"       \"2.3.1\"      #> cli             \"cli\"             \"3.6.3.9000\" #> clipr           \"clipr\"           \"0.8.0\"      #> clock           \"clock\"           \"0.7.0\"      #> coda            \"coda\"            \"0.19-4.1\"   #> cOde            \"cOde\"            \"1.1.1\"      #> collections     \"collections\"     \"0.3.7\"      #> colorspace      \"colorspace\"      \"2.1-0\"      #> commonmark      \"commonmark\"      \"1.9.1\"      #> conflicted      \"conflicted\"      \"1.2.0\"      #> corpcor         \"corpcor\"         \"1.6.10\"     #> covr            \"covr\"            \"3.6.4\"      #> cowplot         \"cowplot\"         \"1.1.3\"      #> cpp11           \"cpp11\"           \"0.4.7\"      #> crayon          \"crayon\"          \"1.5.3\"      #> credentials     \"credentials\"     \"2.0.1\"      #> crosstalk       \"crosstalk\"       \"1.2.1\"      #> cTMed           \"cTMed\"           \"0.9.1\"      #> ctsem           \"ctsem\"           \"3.10.0\"     #> curl            \"curl\"            \"5.2.1\"      #> cyclocomp       \"cyclocomp\"       \"1.1.1\"      #> data.table      \"data.table\"      \"1.15.4\"     #> DBI             \"DBI\"             \"1.2.3\"      #> dbplyr          \"dbplyr\"          \"2.5.0\"      #> Deriv           \"Deriv\"           \"4.1.3\"      #> desc            \"desc\"            \"1.4.3\"      #> deSolve         \"deSolve\"         \"1.40\"       #> devtools        \"devtools\"        \"2.4.5.9000\" #> diagram         \"diagram\"         \"1.6.5\"      #> dials           \"dials\"           \"1.2.1\"      #> DiceDesign      \"DiceDesign\"      \"1.10\"       #> diffobj         \"diffobj\"         \"0.3.5\"      #> digest          \"digest\"          \"0.6.36\"     #> distributional  \"distributional\"  \"0.4.0\"      #> distro          \"distro\"          \"0.1.0\"      #> doBy            \"doBy\"            \"4.6.22\"     #> docopt          \"docopt\"          \"0.7.1\"      #> doFuture        \"doFuture\"        \"1.0.1\"      #> downlit         \"downlit\"         \"0.4.4\"      #> dplyr           \"dplyr\"           \"1.1.4\"      #> DT              \"DT\"              \"0.33\"       #> dtplyr          \"dtplyr\"          \"1.3.1\"      #> duckdb          \"duckdb\"          \"1.0.0\"      #> dynr            \"dynr\"            \"0.1.16-105\" #> dynUtils        \"dynUtils\"        \"0.9.1\"      #> ellipse         \"ellipse\"         \"0.5.0\"      #> ellipsis        \"ellipsis\"        \"0.3.2\"      #> evaluate        \"evaluate\"        \"0.24.0\"     #> expm            \"expm\"            \"0.999-9\"    #> fansi           \"fansi\"           \"1.0.6\"      #> farver          \"farver\"          \"2.1.2\"      #> fastDummies     \"fastDummies\"     \"1.7.3\"      #> fastmap         \"fastmap\"         \"1.2.0\"      #> fclust          \"fclust\"          \"2.1.1.1\"    #> fda             \"fda\"             \"6.1.8\"      #> fdrtool         \"fdrtool\"         \"1.2.17\"     #> fds             \"fds\"             \"1.8\"        #> FNN             \"FNN\"             \"1.1.4\"      #> fontawesome     \"fontawesome\"     \"0.5.2\"      #> forcats         \"forcats\"         \"1.0.0\"      #> foreach         \"foreach\"         \"1.5.2\"      #> Formula         \"Formula\"         \"1.2-5\"      #> fs              \"fs\"              \"1.6.4\"      #> fst             \"fst\"             \"0.9.8\"      #> fstcore         \"fstcore\"         \"0.9.18\"     #> furrr           \"furrr\"           \"0.3.1\"      #> future          \"future\"          \"1.33.2\"     #> future.apply    \"future.apply\"    \"1.11.2\"     #> gargle          \"gargle\"          \"1.5.2\"      #> generics        \"generics\"        \"0.1.3\"      #> gert            \"gert\"            \"2.0.1\"      #> ggplot2         \"ggplot2\"         \"3.5.1\"      #> ggrepel         \"ggrepel\"         \"0.9.5\"      #> gh              \"gh\"              \"1.4.1\"      #> gitcreds        \"gitcreds\"        \"0.1.2\"      #> glasso          \"glasso\"          \"1.11\"       #> glmnet          \"glmnet\"          \"4.1-8\"      #> globals         \"globals\"         \"0.16.3\"     #> glue            \"glue\"            \"1.7.0\"      #> googledrive     \"googledrive\"     \"2.1.1\"      #> googlesheets4   \"googlesheets4\"   \"1.1.1\"      #> gower           \"gower\"           \"1.0.1\"      #> GPfit           \"GPfit\"           \"1.0-8\"      #> gridExtra       \"gridExtra\"       \"2.3\"        #> gsubfn          \"gsubfn\"          \"0.7\"        #> gtable          \"gtable\"          \"0.3.5\"      #> gtools          \"gtools\"          \"3.9.5\"      #> hardhat         \"hardhat\"         \"1.4.0\"      #> haven           \"haven\"           \"2.5.4\"      #> hdrcde          \"hdrcde\"          \"3.4\"        #> here            \"here\"            \"1.0.1\"      #> highr           \"highr\"           \"0.11\"       #> Hmisc           \"Hmisc\"           \"5.1-3\"      #> hms             \"hms\"             \"1.1.3\"      #> htmlTable       \"htmlTable\"       \"2.4.2\"      #> htmltools       \"htmltools\"       \"0.5.8.1\"    #> htmlwidgets     \"htmlwidgets\"     \"1.6.4\"      #> httpgd          \"httpgd\"          \"2.0.2\"      #> httpuv          \"httpuv\"          \"1.6.15\"     #> httr            \"httr\"            \"1.4.7\"      #> httr2           \"httr2\"           \"1.0.1\"      #> ids             \"ids\"             \"1.0.1\"      #> ifaTools        \"ifaTools\"        \"0.23\"       #> igraph          \"igraph\"          \"2.0.3\"      #> infer           \"infer\"           \"1.0.7\"      #> ini             \"ini\"             \"0.3.1\"      #> inline          \"inline\"          \"0.3.19\"     #> ipred           \"ipred\"           \"0.9-14\"     #> isoband         \"isoband\"         \"0.2.7\"      #> iterators       \"iterators\"       \"1.0.14\"     #> jomo            \"jomo\"            \"2.7-6\"      #> jpeg            \"jpeg\"            \"0.1-10\"     #> jquerylib       \"jquerylib\"       \"0.1.4\"      #> jsonlite        \"jsonlite\"        \"1.8.8\"      #> jsonvalidate    \"jsonvalidate\"    \"1.3.2\"      #> kernlab         \"kernlab\"         \"0.9-32\"     #> knitr           \"knitr\"           \"1.47\"       #> ks              \"ks\"              \"1.14.2\"     #> labeling        \"labeling\"        \"0.4.3\"      #> Lahman          \"Lahman\"          \"11.0-0\"     #> languageserver  \"languageserver\"  \"0.3.16\"     #> later           \"later\"           \"1.3.2\"      #> latex2exp       \"latex2exp\"       \"0.9.6\"      #> lava            \"lava\"            \"1.8.0\"      #> lavaan          \"lavaan\"          \"0.6-18\"     #> lazyeval        \"lazyeval\"        \"0.2.2\"      #> lhs             \"lhs\"             \"1.1.6\"      #> lifecycle       \"lifecycle\"       \"1.0.4\"      #> lintr           \"lintr\"           \"3.1.2\"      #> listenv         \"listenv\"         \"0.9.1\"      #> littler         \"littler\"         \"0.3.20\"     #> lme4            \"lme4\"            \"1.1-35.4\"   #> locfit          \"locfit\"          \"1.5-9.10\"   #> longMI          \"longMI\"          \"1.0.0\"      #> loo             \"loo\"             \"2.7.0\"      #> lubridate       \"lubridate\"       \"1.9.3\"      #> magick          \"magick\"          \"2.8.3\"      #> magrittr        \"magrittr\"        \"2.0.3\"      #> markdown        \"markdown\"        \"1.13\"       #> MatrixModels    \"MatrixModels\"    \"0.5-3\"      #> matrixStats     \"matrixStats\"     \"1.3.0\"      #> mclust          \"mclust\"          \"6.1.1\"      #> memoise         \"memoise\"         \"2.0.1\"      #> metaSEM         \"metaSEM\"         \"1.4.0\"      #> mice            \"mice\"            \"3.16.0\"     #> microbenchmark  \"microbenchmark\"  \"1.4.10\"     #> mime            \"mime\"            \"0.12\"       #> miniUI          \"miniUI\"          \"0.1.1.1\"    #> minqa           \"minqa\"           \"1.2.7\"      #> mitml           \"mitml\"           \"0.4-5\"      #> mize            \"mize\"            \"0.2.4\"      #> mnormt          \"mnormt\"          \"2.1.1\"      #> modeldata       \"modeldata\"       \"1.4.0\"      #> modelenv        \"modelenv\"        \"0.1.1\"      #> modelr          \"modelr\"          \"0.1.11\"     #> MplusAutomation \"MplusAutomation\" \"1.1.1\"      #> multicool       \"multicool\"       \"1.0.1\"      #> munsell         \"munsell\"         \"0.5.1\"      #> mvtnorm         \"mvtnorm\"         \"1.2-5\"      #> nloptr          \"nloptr\"          \"2.1.1\"      #> numDeriv        \"numDeriv\"        \"2016.8-1.1\" #> nycflights13    \"nycflights13\"    \"1.0.2\"      #> OpenMx          \"OpenMx\"          \"2.21.11\"    #> openssl         \"openssl\"         \"2.2.0\"      #> ordinal         \"ordinal\"         \"2023.12-4\"  #> pan             \"pan\"             \"1.9\"        #> pander          \"pander\"          \"0.6.5\"      #> parallelly      \"parallelly\"      \"1.37.1\"     #> parsnip         \"parsnip\"         \"1.2.1\"      #> patchwork       \"patchwork\"       \"1.2.0\"      #> pbapply         \"pbapply\"         \"1.7-2\"      #> pbivnorm        \"pbivnorm\"        \"0.6.0\"      #> pbkrtest        \"pbkrtest\"        \"0.5.2\"      #> pcaPP           \"pcaPP\"           \"2.0-4\"      #> pdftools        \"pdftools\"        \"3.4.0\"      #> pillar          \"pillar\"          \"1.9.0\"      #> pkgbuild        \"pkgbuild\"        \"1.4.4\"      #> pkgconfig       \"pkgconfig\"       \"2.0.3\"      #> pkgdown         \"pkgdown\"         \"2.0.9\"      #> pkgload         \"pkgload\"         \"1.3.4\"      #> plogr           \"plogr\"           \"0.2.0\"      #> plyr            \"plyr\"            \"1.8.9\"      #> png             \"png\"             \"0.1-8\"      #> posterior       \"posterior\"       \"1.5.0\"      #> pracma          \"pracma\"          \"2.4.4\"      #> praise          \"praise\"          \"1.0.0\"      #> prettyunits     \"prettyunits\"     \"1.2.0\"      #> printr          \"printr\"          \"0.3\"        #> processx        \"processx\"        \"3.8.4\"      #> prodlim         \"prodlim\"         \"2023.08.28\" #> profvis         \"profvis\"         \"0.3.8\"      #> progress        \"progress\"        \"1.2.3\"      #> progressr       \"progressr\"       \"0.14.0\"     #> promises        \"promises\"        \"1.3.0\"      #> proto           \"proto\"           \"1.0.0\"      #> ps              \"ps\"              \"1.7.6\"      #> psych           \"psych\"           \"2.4.3\"      #> purrr           \"purrr\"           \"1.0.2\"      #> qgraph          \"qgraph\"          \"1.9.8\"      #> qpdf            \"qpdf\"            \"1.3.3\"      #> quadprog        \"quadprog\"        \"1.5-8\"      #> quantreg        \"quantreg\"        \"5.98\"       #> quarto          \"quarto\"          \"1.4\"        #> QuickJSR        \"QuickJSR\"        \"1.2.2\"      #> R.cache         \"R.cache\"         \"0.16.0\"     #> R.methodsS3     \"R.methodsS3\"     \"1.8.2\"      #> R.oo            \"R.oo\"            \"1.26.0\"     #> R.utils         \"R.utils\"         \"2.12.3\"     #> R6              \"R6\"              \"2.5.1\"      #> ragg            \"ragg\"            \"1.3.2\"      #> rainbow         \"rainbow\"         \"3.8\"        #> rappdirs        \"rappdirs\"        \"0.3.3\"      #> rbibutils       \"rbibutils\"       \"2.2.16\"     #> rcmdcheck       \"rcmdcheck\"       \"1.4.0\"      #> RColorBrewer    \"RColorBrewer\"    \"1.1-3\"      #> Rcpp            \"Rcpp\"            \"1.0.12\"     #> RcppArmadillo   \"RcppArmadillo\"   \"0.12.8.4.0\" #> RcppEigen       \"RcppEigen\"       \"0.3.4.0.0\"  #> RcppGSL         \"RcppGSL\"         \"0.3.13\"     #> RcppParallel    \"RcppParallel\"    \"5.1.7\"      #> RcppTOML        \"RcppTOML\"        \"0.2.2\"      #> RCurl           \"RCurl\"           \"1.98-1.14\"  #> Rdpack          \"Rdpack\"          \"2.6\"        #> readr           \"readr\"           \"2.1.5\"      #> readxl          \"readxl\"          \"1.4.3\"      #> recipes         \"recipes\"         \"1.0.10\"     #> RefManageR      \"RefManageR\"      \"1.4.0\"      #> rematch         \"rematch\"         \"2.0.0\"      #> rematch2        \"rematch2\"        \"2.1.2\"      #> remotes         \"remotes\"         \"2.5.0\"      #> reprex          \"reprex\"          \"2.1.0\"      #> reshape2        \"reshape2\"        \"1.4.4\"      #> reticulate      \"reticulate\"      \"1.38.0\"     #> rex             \"rex\"             \"1.2.1\"      #> rhub            \"rhub\"            \"2.0.0\"      #> rlang           \"rlang\"           \"1.1.4\"      #> RMariaDB        \"RMariaDB\"        \"1.3.2\"      #> rmarkdown       \"rmarkdown\"       \"2.27\"       #> roxygen2        \"roxygen2\"        \"7.3.1\"      #> rpf             \"rpf\"             \"1.0.14\"     #> RPostgres       \"RPostgres\"       \"1.4.7\"      #> rProject        \"rProject\"        \"0.0.13\"     #> rprojroot       \"rprojroot\"       \"2.0.4\"      #> rsample         \"rsample\"         \"1.2.1\"      #> RSQLite         \"RSQLite\"         \"2.3.7\"      #> rstan           \"rstan\"           \"2.32.6\"     #> rstantools      \"rstantools\"      \"2.4.0\"      #> rstudioapi      \"rstudioapi\"      \"0.16.0\"     #> rversions       \"rversions\"       \"2.1.2\"      #> rvest           \"rvest\"           \"1.0.4\"      #> Ryacas          \"Ryacas\"          \"1.1.5\"      #> sass            \"sass\"            \"0.4.9\"      #> scales          \"scales\"          \"1.3.0\"      #> selectr         \"selectr\"         \"0.4-2\"      #> semlbci         \"semlbci\"         \"0.11.2\"     #> semmcci         \"semmcci\"         \"1.1.4.9000\" #> sessioninfo     \"sessioninfo\"     \"1.2.2\"      #> shape           \"shape\"           \"1.4.6.1\"    #> shiny           \"shiny\"           \"1.8.1.1\"    #> simStateSpace   \"simStateSpace\"   \"1.2.2.9000\" #> slider          \"slider\"          \"0.3.1\"      #> snow            \"snow\"            \"0.4-4\"      #> snowfall        \"snowfall\"        \"1.84-6.3\"   #> sourcetools     \"sourcetools\"     \"0.1.7-1\"    #> SparseM         \"SparseM\"         \"1.83\"       #> SQUAREM         \"SQUAREM\"         \"2021.1\"     #> StanHeaders     \"StanHeaders\"     \"2.32.9\"     #> statmod         \"statmod\"         \"1.5.0\"      #> stringi         \"stringi\"         \"1.8.4\"      #> stringr         \"stringr\"         \"1.5.1\"      #> styler          \"styler\"          \"1.10.3\"     #> symSEM          \"symSEM\"          \"0.4\"        #> sys             \"sys\"             \"3.4.2\"      #> systemfonts     \"systemfonts\"     \"1.1.0\"      #> tensorA         \"tensorA\"         \"0.36.2.1\"   #> testthat        \"testthat\"        \"3.2.1.9000\" #> texreg          \"texreg\"          \"1.39.3\"     #> textshaping     \"textshaping\"     \"0.4.0\"      #> tibble          \"tibble\"          \"3.2.1\"      #> tidymodels      \"tidymodels\"      \"1.2.0\"      #> tidyr           \"tidyr\"           \"1.3.1\"      #> tidyselect      \"tidyselect\"      \"1.2.1\"      #> tidyverse       \"tidyverse\"       \"2.0.0\"      #> timechange      \"timechange\"      \"0.3.0\"      #> timeDate        \"timeDate\"        \"4032.109\"   #> tinytex         \"tinytex\"         \"0.51.1\"     #> tune            \"tune\"            \"1.2.1\"      #> tzdb            \"tzdb\"            \"0.4.0\"      #> ucminf          \"ucminf\"          \"1.2.2\"      #> unigd           \"unigd\"           \"0.1.2\"      #> urlchecker      \"urlchecker\"      \"1.0.1\"      #> usethis         \"usethis\"         \"2.2.3\"      #> utf8            \"utf8\"            \"1.2.4\"      #> uuid            \"uuid\"            \"1.2-0\"      #> V8              \"V8\"              \"4.4.2\"      #> vctrs           \"vctrs\"           \"0.6.5\"      #> viridis         \"viridis\"         \"0.6.5\"      #> viridisLite     \"viridisLite\"     \"0.4.2\"      #> vroom           \"vroom\"           \"1.6.5\"      #> waldo           \"waldo\"           \"0.5.2\"      #> warp            \"warp\"            \"0.2.1\"      #> whisker         \"whisker\"         \"0.4.1\"      #> whoami          \"whoami\"          \"1.3.0\"      #> withr           \"withr\"           \"3.0.0\"      #> workflows       \"workflows\"       \"1.1.4\"      #> workflowsets    \"workflowsets\"    \"1.1.0\"      #> xfun            \"xfun\"            \"0.45\"       #> xml2            \"xml2\"            \"1.3.6\"      #> xmlparsedata    \"xmlparsedata\"    \"1.0.5\"      #> xopen           \"xopen\"           \"1.0.1\"      #> xtable          \"xtable\"          \"1.8-4\"      #> yaml            \"yaml\"            \"2.3.8\"      #> yardstick       \"yardstick\"       \"1.3.1\"      #> zip             \"zip\"             \"2.3.1\"      #> base            \"base\"            \"4.4.1\"      #> boot            \"boot\"            \"1.3-30\"     #> class           \"class\"           \"7.3-22\"     #> cluster         \"cluster\"         \"2.1.6\"      #> codetools       \"codetools\"       \"0.2-20\"     #> compiler        \"compiler\"        \"4.4.1\"      #> datasets        \"datasets\"        \"4.4.1\"      #> foreign         \"foreign\"         \"0.8-86\"     #> graphics        \"graphics\"        \"4.4.1\"      #> grDevices       \"grDevices\"       \"4.4.1\"      #> grid            \"grid\"            \"4.4.1\"      #> KernSmooth      \"KernSmooth\"      \"2.23-24\"    #> lattice         \"lattice\"         \"0.22-6\"     #> MASS            \"MASS\"            \"7.3-60.2\"   #> Matrix          \"Matrix\"          \"1.7-0\"      #> methods         \"methods\"         \"4.4.1\"      #> mgcv            \"mgcv\"            \"1.9-1\"      #> nlme            \"nlme\"            \"3.1-164\"    #> nnet            \"nnet\"            \"7.3-19\"     #> parallel        \"parallel\"        \"4.4.1\"      #> rpart           \"rpart\"           \"4.1.23\"     #> spatial         \"spatial\"         \"7.3-17\"     #> splines         \"splines\"         \"4.4.1\"      #> stats           \"stats\"           \"4.4.1\"      #> stats4          \"stats4\"          \"4.4.1\"      #> survival        \"survival\"        \"3.6-4\"      #> tcltk           \"tcltk\"           \"4.4.1\"      #> tools           \"tools\"           \"4.4.1\"      #> utils           \"utils\"           \"4.4.1\""},{"path":"https://github.com/jeksterslab/betaMC/articles/session.html","id":"cpu","dir":"Articles","previous_headings":"","what":"CPU","title":"betaMC: Session","text":"","code":"#> Architecture:                       x86_64 #> CPU op-mode(s):                     32-bit, 64-bit #> Address sizes:                      46 bits physical, 48 bits virtual #> Byte Order:                         Little Endian #> CPU(s):                             24 #> On-line CPU(s) list:                0-23 #> Vendor ID:                          GenuineIntel #> Model name:                         Intel(R) Xeon(R) CPU E5-2650 v4 @ 2.20GHz #> CPU family:                         6 #> Model:                              79 #> Thread(s) per core:                 1 #> Core(s) per socket:                 12 #> Socket(s):                          2 #> Stepping:                           1 #> CPU max MHz:                        2900.0000 #> CPU min MHz:                        1200.0000 #> BogoMIPS:                           4389.73 #> Flags:                              fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpuid aperfmperf pni pclmulqdq dtes64 monitor ds_cpl smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat_l3 cdp_l3 invpcid_single pti ssbd ibrs ibpb stibp fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm rdt_a rdseed adx smap intel_pt xsaveopt cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts md_clear flush_l1d #> L1d cache:                          768 KiB (24 instances) #> L1i cache:                          768 KiB (24 instances) #> L2 cache:                           6 MiB (24 instances) #> L3 cache:                           60 MiB (2 instances) #> NUMA node(s):                       2 #> NUMA node0 CPU(s):                  0,2,4,6,8,10,12,14,16,18,20,22 #> NUMA node1 CPU(s):                  1,3,5,7,9,11,13,15,17,19,21,23 #> Vulnerability Gather data sampling: Not affected #> Vulnerability Itlb multihit:        KVM: Mitigation: VMX unsupported #> Vulnerability L1tf:                 Mitigation; PTE Inversion #> Vulnerability Mds:                  Mitigation; Clear CPU buffers; SMT disabled #> Vulnerability Meltdown:             Mitigation; PTI #> Vulnerability Mmio stale data:      Mitigation; Clear CPU buffers; SMT disabled #> Vulnerability Retbleed:             Not affected #> Vulnerability Spec rstack overflow: Not affected #> Vulnerability Spec store bypass:    Mitigation; Speculative Store Bypass disabled via prctl #> Vulnerability Spectre v1:           Mitigation; usercopy/swapgs barriers and __user pointer sanitization #> Vulnerability Spectre v2:           Mitigation; Retpolines, IBPB conditional, IBRS_FW, RSB filling, PBRSB-eIBRS Not affected #> Vulnerability Srbds:                Not affected #> Vulnerability Tsx async abort:      Mitigation; Clear CPU buffers; SMT disabled"},{"path":"https://github.com/jeksterslab/betaMC/articles/session.html","id":"memory","dir":"Articles","previous_headings":"","what":"Memory","title":"betaMC: Session","text":"","code":"#>                total        used        free      shared  buff/cache   available #> Mem:           125Gi       3.2Gi        57Gi       4.7Gi        64Gi       116Gi #> Swap:             0B          0B          0B #> Total:         125Gi       3.2Gi        57Gi"},{"path":"https://github.com/jeksterslab/betaMC/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Ivan Jacob Agaloos Pesigan. Author, maintainer, copyright holder.","code":""},{"path":"https://github.com/jeksterslab/betaMC/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Pesigan, . J. . & Cheung, S. F. (2023). Monte Carlo Regression Effect Sizes. Behavior Research Methods. https://doi.org/10.3758/s13428-023-02114-4","code":"@Article{,   author = {Ivan Jacob Agaloos Pesigan and Shu Fai Cheung},   title = {Monte Carlo confidence intervals for the indirect effect with missing data},   year = {2023},   doi = {10.3758/s13428-023-02114-4},   journal = {Behavior Research Methods}, }"},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"betamc","dir":"","previous_headings":"","what":"Monte Carlo for Regression Effect Sizes","title":"Monte Carlo for Regression Effect Sizes","text":"Ivan Jacob Agaloos Pesigan 2024-07-05","code":""},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Monte Carlo for Regression Effect Sizes","text":"Generates Monte Carlo confidence intervals standardized regression coefficients (beta) effect sizes, including multiple correlation, semipartial correlations, improvement R-squared, squared partial correlations, differences standardized regression coefficients, models fitted lm(). betaMC combines ideas Monte Carlo confidence intervals indirect effect (Pesigan Cheung, 2023: http://doi.org/10.3758/s13428-023-02114-4) sampling covariance matrix regression coefficients (Dudgeon, 2017: http://doi.org/10.1007/s11336-017-9563-z) generate confidence intervals effect sizes regression.","code":""},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Monte Carlo for Regression Effect Sizes","text":"can install CRAN release betaMC : can install development version betaMC GitHub :","code":"install.packages(\"betaMC\") if (!require(\"remotes\")) install.packages(\"remotes\") remotes::install_github(\"jeksterslab/betaMC\")"},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Monte Carlo for Regression Effect Sizes","text":"example, multiple regression model fitted using program quality ratings (QUALITY) regressand/outcome variable number published articles attributed program faculty members (NARTIC), percent faculty members holding research grants (PCTGRT), percentage program graduates received support (PCTSUPP) regressor/predictor variables using data set 1982 ratings 46 doctoral programs psychology USA (National Research Council, 1982). Confidence intervals standardized regression coefficients generated using BetaMC() function betaMC package.","code":"library(betaMC) df <- betaMC::nas1982"},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"regression","dir":"","previous_headings":"Example","what":"Regression","title":"Monte Carlo for Regression Effect Sizes","text":"Fit regression model using lm() function.","code":"object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = df)"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"normal-theory-approach","dir":"","previous_headings":"Example > Monte Carlo Sampling Distribution of Parameters","what":"Normal-Theory Approach","title":"Monte Carlo for Regression Effect Sizes","text":"","code":"mvn <- MC(object, type = \"mvn\")"},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"asymptotic-distribution-free-approach","dir":"","previous_headings":"Example > Monte Carlo Sampling Distribution of Parameters","what":"Asymptotic distribution-free Approach","title":"Monte Carlo for Regression Effect Sizes","text":"","code":"adf <- MC(object, type = \"adf\")"},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"heteroskedasticity-consistent-approach-hc3","dir":"","previous_headings":"Example > Monte Carlo Sampling Distribution of Parameters","what":"Heteroskedasticity Consistent Approach (HC3)","title":"Monte Carlo for Regression Effect Sizes","text":"","code":"hc3 <- MC(object, type = \"hc3\")"},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"normal-theory-approach-1","dir":"","previous_headings":"Example > Standardized Regression Slopes","what":"Normal-Theory Approach","title":"Monte Carlo for Regression Effect Sizes","text":"","code":"BetaMC(mvn, alpha = 0.05) #> Call: #> BetaMC(object = mvn, alpha = 0.05) #>  #> Standardized regression slopes #> type = \"mvn\" #>            est     se     R   2.5%  97.5% #> NARTIC  0.4951 0.0760 20000 0.3365 0.6351 #> PCTGRT  0.3915 0.0767 20000 0.2403 0.5386 #> PCTSUPP 0.2632 0.0740 20000 0.1190 0.4098"},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"asymptotic-distribution-free-approach-1","dir":"","previous_headings":"Example > Standardized Regression Slopes","what":"Asymptotic distribution-free Approach","title":"Monte Carlo for Regression Effect Sizes","text":"","code":"BetaMC(adf, alpha = 0.05) #> Call: #> BetaMC(object = adf, alpha = 0.05) #>  #> Standardized regression slopes #> type = \"adf\" #>            est     se     R   2.5%  97.5% #> NARTIC  0.4951 0.0675 20000 0.3515 0.6164 #> PCTGRT  0.3915 0.0708 20000 0.2442 0.5203 #> PCTSUPP 0.2632 0.0772 20000 0.1041 0.4052"},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"heteroskedasticity-consistent-approach-hc3-1","dir":"","previous_headings":"Example > Standardized Regression Slopes","what":"Heteroskedasticity Consistent Approach (HC3)","title":"Monte Carlo for Regression Effect Sizes","text":"","code":"BetaMC(hc3, alpha = 0.05) #> Call: #> BetaMC(object = hc3, alpha = 0.05) #>  #> Standardized regression slopes #> type = \"hc3\" #>            est     se     R   2.5%  97.5% #> NARTIC  0.4951 0.0798 20000 0.3253 0.6367 #> PCTGRT  0.3915 0.0821 20000 0.2160 0.5373 #> PCTSUPP 0.2632 0.0859 20000 0.0888 0.4264"},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"other-effect-sizes","dir":"","previous_headings":"Example","what":"Other Effect Sizes","title":"Monte Carlo for Regression Effect Sizes","text":"betaMC package also functions generate Monte Carlo confidence intervals effect sizes RSqMC() multiple correlation coefficients (R-squared adjusted R-squared), DeltaRSqMC() improvement R-squared, SCorMC() semipartial correlation coefficients, PCorMC() squared partial correlation coefficients, DiffBetaMC() differences standardized regression coefficients.","code":""},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"multiple-correlation-coefficients-r-squared-and-adjusted-r-squared","dir":"","previous_headings":"Example > Other Effect Sizes","what":"Multiple Correlation Coefficients (R-squared and adjusted R-squared)","title":"Monte Carlo for Regression Effect Sizes","text":"","code":"RSqMC(hc3, alpha = 0.05) #> Call: #> RSqMC(object = hc3, alpha = 0.05) #>  #> R-squared and adjusted R-squared #> type = \"hc3\" #>        est     se     R   2.5%  97.5% #> rsq 0.8045 0.0626 20000 0.6461 0.8893 #> adj 0.7906 0.0670 20000 0.6208 0.8814"},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"improvement-in-r-squared","dir":"","previous_headings":"Example > Other Effect Sizes","what":"Improvement in R-squared","title":"Monte Carlo for Regression Effect Sizes","text":"","code":"DeltaRSqMC(hc3, alpha = 0.05) #> Call: #> DeltaRSqMC(object = hc3, alpha = 0.05) #>  #> Improvement in R-squared #> type = \"hc3\" #>            est     se     R   2.5%  97.5% #> NARTIC  0.1859 0.0692 20000 0.0489 0.3213 #> PCTGRT  0.1177 0.0540 20000 0.0251 0.2350 #> PCTSUPP 0.0569 0.0377 20000 0.0060 0.1520"},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"semipartial-correlation-coefficients","dir":"","previous_headings":"Example > Other Effect Sizes","what":"Semipartial Correlation Coefficients","title":"Monte Carlo for Regression Effect Sizes","text":"","code":"SCorMC(hc3, alpha = 0.05) #> Call: #> SCorMC(object = hc3, alpha = 0.05) #>  #> Semipartial correlations #> type = \"hc3\" #>            est     se     R   2.5%  97.5% #> NARTIC  0.4312 0.0869 20000 0.2212 0.5668 #> PCTGRT  0.3430 0.0827 20000 0.1585 0.4848 #> PCTSUPP 0.2385 0.0785 20000 0.0771 0.3898"},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"squared-partial-correlation-coefficients","dir":"","previous_headings":"Example > Other Effect Sizes","what":"Squared Partial Correlation Coefficients","title":"Monte Carlo for Regression Effect Sizes","text":"","code":"PCorMC(hc3, alpha = 0.05) #> Call: #> PCorMC(object = hc3, alpha = 0.05) #>  #> Squared partial correlations #> type = \"hc3\" #>            est     se     R   2.5%  97.5% #> NARTIC  0.4874 0.1196 20000 0.1762 0.6497 #> PCTGRT  0.3757 0.1157 20000 0.1037 0.5557 #> PCTSUPP 0.2254 0.1128 20000 0.0251 0.4548"},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"differences-of-standardized-regression-coefficients","dir":"","previous_headings":"Example > Other Effect Sizes","what":"Differences of Standardized Regression Coefficients","title":"Monte Carlo for Regression Effect Sizes","text":"","code":"DiffBetaMC(hc3, alpha = 0.05) #> Call: #> DiffBetaMC(object = hc3, alpha = 0.05) #>  #> Differences of standardized regression slopes #> type = \"hc3\" #>                   est     se     R    2.5%  97.5% #> NARTIC-PCTGRT  0.1037 0.1426 20000 -0.1734 0.3837 #> NARTIC-PCTSUPP 0.2319 0.1335 20000 -0.0348 0.4847 #> PCTGRT-PCTSUPP 0.1282 0.1369 20000 -0.1512 0.3846"},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Monte Carlo for Regression Effect Sizes","text":"See GitHub Pages package documentation.","code":""},{"path":"https://github.com/jeksterslab/betaMC/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Monte Carlo for Regression Effect Sizes","text":"cite betaMC publications, please cite Pesigan & Cheung (2023).","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/reference/BetaMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Standardized Regression Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — BetaMC","title":"Estimate Standardized Regression Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — BetaMC","text":"Estimate Standardized Regression Coefficients Generate Corresponding Sampling Distribution Using Monte Carlo Method","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/BetaMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Standardized Regression Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — BetaMC","text":"","code":"BetaMC(object, alpha = c(0.05, 0.01, 0.001))"},{"path":"https://github.com/jeksterslab/betaMC/reference/BetaMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Standardized Regression Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — BetaMC","text":"object Object class mc, , output MC() function. alpha Numeric vector. Significance level \\(\\alpha\\).","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/BetaMC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Standardized Regression Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — BetaMC","text":"Returns object class betamc list following elements: call Function call. args Function arguments. thetahatstar Sampling distribution \\(\\boldsymbol{\\hat{\\beta}}\\). vcov Sampling variance-covariance matrix \\(\\boldsymbol{\\hat{\\beta}}\\). est Vector estimated \\(\\boldsymbol{\\hat{\\beta}}\\). fun Function used (\"BetaMC\").","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/BetaMC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Standardized Regression Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — BetaMC","text":"vector standardized regression coefficients (\\(\\boldsymbol{\\hat{\\beta}}\\)) derived randomly generated vector parameter estimates. Confidence intervals generated obtaining percentiles corresponding \\(100(1 - \\alpha)\\%\\) generated sampling distribution \\(\\boldsymbol{\\hat{\\beta}}\\), \\(\\alpha\\) significance level.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/reference/BetaMC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate Standardized Regression Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — BetaMC","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/BetaMC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Standardized Regression Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — BetaMC","text":"","code":"# Data --------------------------------------------------------------------- data(\"nas1982\", package = \"betaMC\")  # Fit Model in lm ---------------------------------------------------------- object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = nas1982)  # MC ----------------------------------------------------------------------- mc <- MC(   object,   R = 100, # use a large value e.g., 20000L for actual research   seed = 0508 )  # BetaMC ------------------------------------------------------------------- out <- BetaMC(mc, alpha = 0.05)  ## Methods ----------------------------------------------------------------- print(out) #> Call: #> BetaMC(object = mc, alpha = 0.05) #>  #> Standardized regression slopes #> type = \"hc3\" #>            est     se   R   2.5%  97.5% #> NARTIC  0.4951 0.0760 100 0.3508 0.6231 #> PCTGRT  0.3915 0.0732 100 0.2643 0.5224 #> PCTSUPP 0.2632 0.0808 100 0.1014 0.4009 summary(out) #> Call: #> BetaMC(object = mc, alpha = 0.05) #>  #> Standardized regression slopes #> type = \"hc3\" #>            est     se   R   2.5%  97.5% #> NARTIC  0.4951 0.0760 100 0.3508 0.6231 #> PCTGRT  0.3915 0.0732 100 0.2643 0.5224 #> PCTSUPP 0.2632 0.0808 100 0.1014 0.4009 coef(out) #>    NARTIC    PCTGRT   PCTSUPP  #> 0.4951451 0.3914887 0.2632477  vcov(out) #>               NARTIC       PCTGRT      PCTSUPP #> NARTIC   0.005776525 -0.002834952 -0.002143637 #> PCTGRT  -0.002834952  0.005360100 -0.001947940 #> PCTSUPP -0.002143637 -0.001947940  0.006526525 confint(out, level = 0.95) #>             2.5 %    97.5 % #> NARTIC  0.3507721 0.6231028 #> PCTGRT  0.2643226 0.5224279 #> PCTSUPP 0.1013892 0.4008517"},{"path":"https://github.com/jeksterslab/betaMC/reference/DeltaRSqMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Improvement in R-Squared and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — DeltaRSqMC","title":"Estimate Improvement in R-Squared and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — DeltaRSqMC","text":"Estimate Improvement R-Squared Generate Corresponding Sampling Distribution Using Monte Carlo Method","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/DeltaRSqMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Improvement in R-Squared and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — DeltaRSqMC","text":"","code":"DeltaRSqMC(object, alpha = c(0.05, 0.01, 0.001))"},{"path":"https://github.com/jeksterslab/betaMC/reference/DeltaRSqMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Improvement in R-Squared and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — DeltaRSqMC","text":"object Object class mc, , output MC() function. alpha Numeric vector. Significance level \\(\\alpha\\).","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/DeltaRSqMC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Improvement in R-Squared and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — DeltaRSqMC","text":"Returns object class betamc list following elements: call Function call. args Function arguments. thetahatstar Sampling distribution \\(\\Delta R^{2}\\). vcov Sampling variance-covariance matrix \\(\\Delta R^{2}\\). est Vector estimated \\(\\Delta R^{2}\\). fun Function used (\"DeltaRSqMC\").","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/DeltaRSqMC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Improvement in R-Squared and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — DeltaRSqMC","text":"vector improvement R-squared (\\(\\Delta R^{2}\\)) derived randomly generated vector parameter estimates. Confidence intervals generated obtaining percentiles corresponding \\(100(1 - \\alpha)\\%\\) generated sampling distribution \\(\\Delta R^{2}\\), \\(\\alpha\\) significance level.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/reference/DeltaRSqMC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate Improvement in R-Squared and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — DeltaRSqMC","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/DeltaRSqMC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Improvement in R-Squared and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — DeltaRSqMC","text":"","code":"# Data --------------------------------------------------------------------- data(\"nas1982\", package = \"betaMC\")  # Fit Model in lm ---------------------------------------------------------- object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = nas1982)  # MC ----------------------------------------------------------------------- mc <- MC(   object,   R = 100, # use a large value e.g., 20000L for actual research   seed = 0508 )  # DeltaRSqMC --------------------------------------------------------------- out <- DeltaRSqMC(mc, alpha = 0.05)  ## Methods ----------------------------------------------------------------- print(out) #> Call: #> DeltaRSqMC(object = mc, alpha = 0.05) #>  #> Improvement in R-squared #> type = \"hc3\" #>            est     se   R   2.5%  97.5% #> NARTIC  0.1859 0.0673 100 0.0527 0.3163 #> PCTGRT  0.1177 0.0496 100 0.0272 0.2156 #> PCTSUPP 0.0569 0.0323 100 0.0079 0.1274 summary(out) #> Call: #> DeltaRSqMC(object = mc, alpha = 0.05) #>  #> Improvement in R-squared #> type = \"hc3\" #>            est     se   R   2.5%  97.5% #> NARTIC  0.1859 0.0673 100 0.0527 0.3163 #> PCTGRT  0.1177 0.0496 100 0.0272 0.2156 #> PCTSUPP 0.0569 0.0323 100 0.0079 0.1274 coef(out) #>    NARTIC    PCTGRT   PCTSUPP  #> 0.1858925 0.1176542 0.0568722  vcov(out) #>                NARTIC        PCTGRT       PCTSUPP #> NARTIC   0.0045232624  0.0005521534 -0.0001510877 #> PCTGRT   0.0005521534  0.0024592635 -0.0002500184 #> PCTSUPP -0.0001510877 -0.0002500184  0.0010413251 confint(out, level = 0.95) #>               2.5 %    97.5 % #> NARTIC  0.052718279 0.3162597 #> PCTGRT  0.027238743 0.2156250 #> PCTSUPP 0.007917799 0.1273978"},{"path":"https://github.com/jeksterslab/betaMC/reference/DiffBetaMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Differences of Standardized Slopes and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — DiffBetaMC","title":"Estimate Differences of Standardized Slopes and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — DiffBetaMC","text":"Estimate Differences Standardized Slopes Generate Corresponding Sampling Distribution Using Monte Carlo Method","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/DiffBetaMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Differences of Standardized Slopes and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — DiffBetaMC","text":"","code":"DiffBetaMC(object, alpha = c(0.05, 0.01, 0.001))"},{"path":"https://github.com/jeksterslab/betaMC/reference/DiffBetaMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Differences of Standardized Slopes and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — DiffBetaMC","text":"object Object class mc, , output MC() function. alpha Numeric vector. Significance level \\(\\alpha\\).","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/DiffBetaMC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Differences of Standardized Slopes and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — DiffBetaMC","text":"Returns object class betamc list following elements: call Function call. args Function arguments. thetahatstar Sampling distribution differences standardized regression slopes. vcov Sampling variance-covariance matrix differences standardized regression slopes. est Vector estimated differences standardized regression slopes. fun Function used (\"DiffBetaMC\").","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/DiffBetaMC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Differences of Standardized Slopes and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — DiffBetaMC","text":"vector differences standardized regression slopes derived randomly generated vector parameter estimates. Confidence intervals generated obtaining percentiles corresponding \\(100(1 - \\alpha)\\%\\) generated sampling distribution differences standardized regression slopes, \\(\\alpha\\) significance level.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/reference/DiffBetaMC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate Differences of Standardized Slopes and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — DiffBetaMC","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/DiffBetaMC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Differences of Standardized Slopes and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — DiffBetaMC","text":"","code":"# Data --------------------------------------------------------------------- data(\"nas1982\", package = \"betaMC\")  # Fit Model in lm ---------------------------------------------------------- object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = nas1982)  # MC ----------------------------------------------------------------------- mc <- MC(   object,   R = 100, # use a large value e.g., 20000L for actual research   seed = 0508 )  # DiffBetaMC --------------------------------------------------------------- out <- DiffBetaMC(mc, alpha = 0.05)  ## Methods ----------------------------------------------------------------- print(out) #> Call: #> DiffBetaMC(object = mc, alpha = 0.05) #>  #> Differences of standardized regression slopes #> type = \"hc3\" #>                   est     se   R    2.5%  97.5% #> NARTIC-PCTGRT  0.1037 0.1296 100 -0.1366 0.3402 #> NARTIC-PCTSUPP 0.2319 0.1288 100 -0.0081 0.4676 #> PCTGRT-PCTSUPP 0.1282 0.1256 100 -0.1156 0.3734 summary(out) #> Call: #> DiffBetaMC(object = mc, alpha = 0.05) #>  #> Differences of standardized regression slopes #> type = \"hc3\" #>                   est     se   R    2.5%  97.5% #> NARTIC-PCTGRT  0.1037 0.1296 100 -0.1366 0.3402 #> NARTIC-PCTSUPP 0.2319 0.1288 100 -0.0081 0.4676 #> PCTGRT-PCTSUPP 0.1282 0.1256 100 -0.1156 0.3734 coef(out) #>  NARTIC-PCTGRT NARTIC-PCTSUPP PCTGRT-PCTSUPP  #>      0.1036564      0.2318974      0.1282410  vcov(out) #>                NARTIC-PCTGRT NARTIC-PCTSUPP PCTGRT-PCTSUPP #> NARTIC-PCTGRT    0.016806528    0.008807174   -0.007999355 #> NARTIC-PCTSUPP   0.008807174    0.016590325    0.007783151 #> PCTGRT-PCTSUPP  -0.007999355    0.007783151    0.015782506 confint(out, level = 0.95) #>                       2.5 %    97.5 % #> NARTIC-PCTGRT  -0.136563743 0.3402320 #> NARTIC-PCTSUPP -0.008099405 0.4676292 #> PCTGRT-PCTSUPP -0.115552550 0.3733956"},{"path":"https://github.com/jeksterslab/betaMC/reference/MC.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method — MC","title":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method — MC","text":"Generate Sampling Distribution Regression Parameters Using Monte Carlo Method","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/MC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method — MC","text":"","code":"MC(   object,   R = 20000L,   type = \"hc3\",   g1 = 1,   g2 = 1.5,   k = 0.7,   decomposition = \"eigen\",   pd = TRUE,   tol = 1e-06,   fixed_x = FALSE,   seed = NULL )"},{"path":"https://github.com/jeksterslab/betaMC/reference/MC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method — MC","text":"object Object class lm. R Positive integer. Number Monte Carlo replications. type Character string. Sampling covariance matrix type. Possible values \"mvn\", \"adf\", \"hc0\", \"hc1\", \"hc2\", \"hc3\", \"hc4\", \"hc4m\", \"hc5\". type = \"mvn\" uses normal-theory sampling covariance matrix. type = \"adf\" uses asymptotic distribution-free sampling covariance matrix. type = \"hc0\" \"hc5\" uses different versions heteroskedasticity-consistent sampling covariance matrix. g1 Numeric. g1 value type = \"hc4m\". g2 Numeric. g2 value type = \"hc4m\". k Numeric. Constant type = \"hc5\" decomposition Character string. Matrix decomposition sampling variance-covariance matrix data generation. decomposition = \"chol\", use Cholesky decomposition. decomposition = \"eigen\", use eigenvalue decomposition. decomposition = \"svd\", use singular value decomposition. pd Logical. pd = TRUE, check sampling variance-covariance matrix positive definite using tol. tol Numeric. Tolerance used pd. fixed_x Logical. fixed_x = TRUE, treat regressors fixed. fixed_x = FALSE, treat regressors random. seed Integer. Seed number reproducibility.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/MC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method — MC","text":"Returns object class mc list following elements: call Function call. args Function arguments. lm_process Processed lm object. scale Sampling variance-covariance matrix parameter estimates. location Parameter estimates. thetahatstar Sampling distribution parameter estimates. fun Function used (\"MC\").","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/MC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method — MC","text":"Let parameter vector unstandardized regression model given $$     \\boldsymbol{\\theta}     =     \\left\\{     \\mathbf{b},     \\sigma^{2},     \\mathrm{vech}     \\left(       \\boldsymbol{\\Sigma}_{\\mathbf{X}\\mathbf{X}}     \\right)     \\right\\}   $$ \\(\\mathbf{b}\\) vector regression slopes, \\(\\sigma^{2}\\) error variance, \\(     \\mathrm{vech}     \\left(       \\boldsymbol{\\Sigma}_{\\mathbf{X}\\mathbf{X}}     \\right)   \\) vector unique elements covariance matrix regressor variables. empirical sampling distribution \\(\\boldsymbol{\\theta}\\) generated using Monte Carlo method, , random values parameter estimates sampled multivariate normal distribution using estimated parameter vector mean vector specified sampling covariance matrix using type argument covariance matrix. replacement sampling approach implemented ensure model-implied covariance matrix positive definite.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/MC.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method — MC","text":"Dudgeon, P. (2017). improvements confidence intervals standardized regression coefficients. Psychometrika, 82(4), 928–951. doi:10.1007/s11336-017-9563-z MacKinnon, D. P., Lockwood, C. M., & Williams, J. (2004). Confidence limits indirect effect: Distribution product resampling methods. Multivariate Behavioral Research, 39(1), 99-128. doi:10.1207/s15327906mbr3901_4 Pesigan, . J. ., & Cheung, S. F. (2023). Monte Carlo confidence intervals indirect effect missing data. Behavior Research Methods. doi:10.3758/s13428-023-02114-4 Preacher, K. J., & Selig, J. P. (2012). Advantages Monte Carlo confidence intervals indirect effects. Communication Methods Measures, 6(2), 77–98. doi:10.1080/19312458.2012.679848","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/reference/MC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method — MC","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/MC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method — MC","text":"","code":"# Data --------------------------------------------------------------------- data(\"nas1982\", package = \"betaMC\")  # Fit Model in lm ---------------------------------------------------------- object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = nas1982)  # MC ----------------------------------------------------------------------- mc <- MC(   object,   R = 100, # use a large value e.g., 20000L for actual research   seed = 0508 ) mc #> Call: #> MC(object = object, R = 100, seed = 508) #> The first set of simulated parameter estimates #> and model-implied covariance matrix. #>  #> $coef #> [1] 0.08131373 0.18654775 0.15899393 #>  #> $sigmasq #> [1] 19.0325 #>  #> $vechsigmacapx #> [1] 3796.5610  605.8221  607.1206  306.2053  191.5167  529.1519 #>  #> $sigmacapx #>           [,1]     [,2]     [,3] #> [1,] 3796.5610 605.8221 607.1206 #> [2,]  605.8221 306.2053 191.5167 #> [3,]  607.1206 191.5167 529.1519 #>  #> $sigmaysq #> [1] 113.6057 #>  #> $sigmayx #> [1] 518.2558 136.8336 169.2262 #>  #> $sigmacap #>          [,1]      [,2]     [,3]     [,4] #> [1,] 113.6057  518.2558 136.8336 169.2262 #> [2,] 518.2558 3796.5610 605.8221 607.1206 #> [3,] 136.8336  605.8221 306.2053 191.5167 #> [4,] 169.2262  607.1206 191.5167 529.1519 #>  #> $pd #> [1] TRUE #>  # The `mc` object can be passed as the first argument # to the following functions #   - BetaMC #   - DeltaRSqMC #   - DiffBetaMC #   - PCorMC #   - RSqMC #   - SCorMC"},{"path":"https://github.com/jeksterslab/betaMC/reference/MCMI.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method for Data with Missing Values — MCMI","title":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method for Data with Missing Values — MCMI","text":"Generate Sampling Distribution Regression Parameters Using Monte Carlo Method Data Missing Values","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/MCMI.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method for Data with Missing Values — MCMI","text":"","code":"MCMI(   object,   mi,   R = 20000L,   type = \"hc3\",   g1 = 1,   g2 = 1.5,   k = 0.7,   decomposition = \"eigen\",   pd = TRUE,   tol = 1e-06,   fixed_x = FALSE,   seed = NULL )"},{"path":"https://github.com/jeksterslab/betaMC/reference/MCMI.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method for Data with Missing Values — MCMI","text":"object Object class lm. mi Object class mids (output mice::mice()), object class amelia (output Amelia::amelia()), list multiply imputed data sets. R Positive integer. Number Monte Carlo replications. type Character string. Sampling covariance matrix type. Possible values \"mvn\", \"adf\", \"hc0\", \"hc1\", \"hc2\", \"hc3\", \"hc4\", \"hc4m\", \"hc5\". type = \"mvn\" uses normal-theory sampling covariance matrix. type = \"adf\" uses asymptotic distribution-free sampling covariance matrix. type = \"hc0\" \"hc5\" uses different versions heteroskedasticity-consistent sampling covariance matrix. g1 Numeric. g1 value type = \"hc4m\". g2 Numeric. g2 value type = \"hc4m\". k Numeric. Constant type = \"hc5\" decomposition Character string. Matrix decomposition sampling variance-covariance matrix data generation. decomposition = \"chol\", use Cholesky decomposition. decomposition = \"eigen\", use eigenvalue decomposition. decomposition = \"svd\", use singular value decomposition. pd Logical. pd = TRUE, check sampling variance-covariance matrix positive definite using tol. tol Numeric. Tolerance used pd. fixed_x Logical. fixed_x = TRUE, treat regressors fixed. fixed_x = FALSE, treat regressors random. seed Integer. Seed number reproducibility.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/MCMI.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method for Data with Missing Values — MCMI","text":"Returns object class mc list following elements: call Function call. args Function arguments. lm_process Processed lm object. scale Sampling variance-covariance matrix parameter estimates. location Parameter estimates. thetahatstar Sampling distribution parameter estimates. fun Function used (\"MCMI\").","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/MCMI.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method for Data with Missing Values — MCMI","text":"Multiple imputation used deal missing values data set. vector parameter estimates corresponding sampling covariance matrix estimated imputed data sets. Results combined arrive pooled vector parameter estimates corresponding sampling covariance matrix. pooled estimates used generate sampling distribution regression parameters. See MC() details Monte Carlo method.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/MCMI.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method for Data with Missing Values — MCMI","text":"Dudgeon, P. (2017). improvements confidence intervals standardized regression coefficients. Psychometrika, 82(4), 928–951. doi:10.1007/s11336-017-9563-z MacKinnon, D. P., Lockwood, C. M., & Williams, J. (2004). Confidence limits indirect effect: Distribution product resampling methods. Multivariate Behavioral Research, 39(1), 99-128. doi:10.1207/s15327906mbr3901_4 Pesigan, . J. ., & Cheung, S. F. (2023). Monte Carlo confidence intervals indirect effect missing data. Behavior Research Methods. doi:10.3758/s13428-023-02114-4 Preacher, K. J., & Selig, J. P. (2012). Advantages Monte Carlo confidence intervals indirect effects. Communication Methods Measures, 6(2), 77–98. doi:10.1080/19312458.2012.679848","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/reference/MCMI.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method for Data with Missing Values — MCMI","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/MCMI.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate the Sampling Distribution of Regression Parameters Using the Monte Carlo Method for Data with Missing Values — MCMI","text":"","code":"# Data --------------------------------------------------------------------- data(\"nas1982\", package = \"betaMC\") nas1982_missing <- mice::ampute(nas1982)$amp # data set with missing values  # Multiple Imputation mi <- mice::mice(nas1982_missing, m = 5, seed = 42, print = FALSE)  # Fit Model in lm ---------------------------------------------------------- ## Note that this does not deal with missing values. ## The fitted model (`object`) is updated with each imputed data ## within the `MCMI()` function. object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = nas1982_missing)  # Monte Carlo -------------------------------------------------------------- mc <- MCMI(   object,   mi = mi,   R = 100, # use a large value e.g., 20000L for actual research   seed = 0508 ) mc #> Call: #> MCMI(object = object, mi = mi, R = 100, seed = 508) #> The first set of simulated parameter estimates #> and model-implied covariance matrix. #>  #> $coef #> [1] 0.08360573 0.18269795 0.15525578 #>  #> $sigmasq #> [1] 20.30319 #>  #> $vechsigmacapx #> [1] 3712.8505  609.1971  635.5153  332.2336  201.1010  549.9604 #>  #> $sigmacapx #>           [,1]     [,2]     [,3] #> [1,] 3712.8505 609.1971 635.5153 #> [2,]  609.1971 332.2336 201.1010 #> [3,]  635.5153 201.1010 549.9604 #>  #> $sigmaysq #> [1] 117.1189 #>  #> $sigmayx #> [1] 520.3821 142.8529 175.2580 #>  #> $sigmacap #>          [,1]      [,2]     [,3]     [,4] #> [1,] 117.1189  520.3821 142.8529 175.2580 #> [2,] 520.3821 3712.8505 609.1971 635.5153 #> [3,] 142.8529  609.1971 332.2336 201.1010 #> [4,] 175.2580  635.5153 201.1010 549.9604 #>  #> $pd #> [1] TRUE #>  # The `mc` object can be passed as the first argument # to the following functions #   - BetaMC #   - DeltaRSqMC #   - DiffBetaMC #   - PCorMC #   - RSqMC #   - SCorMC"},{"path":"https://github.com/jeksterslab/betaMC/reference/PCorMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Squared Partial Correlation Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — PCorMC","title":"Estimate Squared Partial Correlation Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — PCorMC","text":"Estimate Squared Partial Correlation Coefficients Generate Corresponding Sampling Distribution Using Monte Carlo Method","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/PCorMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Squared Partial Correlation Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — PCorMC","text":"","code":"PCorMC(object, alpha = c(0.05, 0.01, 0.001))"},{"path":"https://github.com/jeksterslab/betaMC/reference/PCorMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Squared Partial Correlation Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — PCorMC","text":"object Object class mc, , output MC() function. alpha Numeric vector. Significance level \\(\\alpha\\).","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/PCorMC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Squared Partial Correlation Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — PCorMC","text":"Returns object class betamc list following elements: call Function call. args Function arguments. thetahatstar Sampling distribution \\(r^{2}_{p}\\). vcov Sampling variance-covariance matrix \\(r^{2}_{p}\\). est Vector estimated \\(r^{2}_{p}\\). fun Function used (\"PCorMC\").","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/PCorMC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Squared Partial Correlation Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — PCorMC","text":"vector squared partial correlation coefficients (\\(r^{2}_{p}\\)) derived randomly generated vector parameter estimates. Confidence intervals generated obtaining percentiles corresponding \\(100(1 - \\alpha)\\%\\) generated sampling distribution \\(r^{2}_{p}\\), \\(\\alpha\\) significance level.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/reference/PCorMC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate Squared Partial Correlation Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — PCorMC","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/PCorMC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Squared Partial Correlation Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — PCorMC","text":"","code":"# Data --------------------------------------------------------------------- data(\"nas1982\", package = \"betaMC\")  # Fit Model in lm ---------------------------------------------------------- object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = nas1982)  # MC ----------------------------------------------------------------------- mc <- MC(   object,   R = 100, # use a large value e.g., 20000L for actual research   seed = 0508 )  # PCorMC ------------------------------------------------------------------- out <- PCorMC(mc, alpha = 0.05)  ## Methods ----------------------------------------------------------------- print(out) #> Call: #> PCorMC(object = mc, alpha = 0.05) #>  #> Squared partial correlations #> type = \"hc3\" #>            est     se   R   2.5%  97.5% #> NARTIC  0.4874 0.1228 100 0.1690 0.6040 #> PCTGRT  0.3757 0.1085 100 0.1102 0.5049 #> PCTSUPP 0.2254 0.1035 100 0.0274 0.4129 summary(out) #> Call: #> PCorMC(object = mc, alpha = 0.05) #>  #> Squared partial correlations #> type = \"hc3\" #>            est     se   R   2.5%  97.5% #> NARTIC  0.4874 0.1228 100 0.1690 0.6040 #> PCTGRT  0.3757 0.1085 100 0.1102 0.5049 #> PCTSUPP 0.2254 0.1035 100 0.0274 0.4129 coef(out) #>    NARTIC    PCTGRT   PCTSUPP  #> 0.4874382 0.3757383 0.2253739  vcov(out) #>              NARTIC      PCTGRT     PCTSUPP #> NARTIC  0.015070964 0.005353598 0.002240937 #> PCTGRT  0.005353598 0.011763713 0.001066046 #> PCTSUPP 0.002240937 0.001066046 0.010704482 confint(out, level = 0.95) #>             2.5 %    97.5 % #> NARTIC  0.1689777 0.6039797 #> PCTGRT  0.1102259 0.5049136 #> PCTSUPP 0.0273768 0.4128501"},{"path":"https://github.com/jeksterslab/betaMC/reference/RSqMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Multiple Correlation Coefficients (R-Squared and Adjusted R-Squared) and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — RSqMC","title":"Estimate Multiple Correlation Coefficients (R-Squared and Adjusted R-Squared) and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — RSqMC","text":"Estimate Multiple Correlation Coefficients (R-Squared Adjusted R-Squared) Generate Corresponding Sampling Distribution Using Monte Carlo Method","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/RSqMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Multiple Correlation Coefficients (R-Squared and Adjusted R-Squared) and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — RSqMC","text":"","code":"RSqMC(object, alpha = c(0.05, 0.01, 0.001))"},{"path":"https://github.com/jeksterslab/betaMC/reference/RSqMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Multiple Correlation Coefficients (R-Squared and Adjusted R-Squared) and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — RSqMC","text":"object Object class mc, , output MC() function. alpha Numeric vector. Significance level \\(\\alpha\\).","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/RSqMC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Multiple Correlation Coefficients (R-Squared and Adjusted R-Squared) and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — RSqMC","text":"Returns object class betamc list following elements: call Function call. args Function arguments. thetahatstar Sampling distribution \\(R^{2}\\) \\(\\bar{R}^{2}\\). vcov Sampling variance-covariance matrix \\(R^{2}\\) \\(\\bar{R}^{2}\\). est Vector estimated \\(R^{2}\\) \\(\\bar{R}^{2}\\). fun Function used (\"RSqMC\").","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/RSqMC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Multiple Correlation Coefficients (R-Squared and Adjusted R-Squared) and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — RSqMC","text":"R-squared (\\(R^{2}\\)) adjusted R-squared (\\(\\bar{R}^{2}\\)) derived randomly generated vector parameter estimates. Confidence intervals generated obtaining percentiles corresponding \\(100(1 - \\alpha)\\%\\) generated sampling distribution \\(R^{2}\\) \\(\\bar{R}^{2}\\), \\(\\alpha\\) significance level.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/reference/RSqMC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate Multiple Correlation Coefficients (R-Squared and Adjusted R-Squared) and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — RSqMC","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/RSqMC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Multiple Correlation Coefficients (R-Squared and Adjusted R-Squared) and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — RSqMC","text":"","code":"# Data --------------------------------------------------------------------- data(\"nas1982\", package = \"betaMC\")  # Fit Model in lm ---------------------------------------------------------- object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = nas1982)  # MC ----------------------------------------------------------------------- mc <- MC(   object,   R = 100, # use a large value e.g., 20000L for actual research   seed = 0508 )  # RSqMC -------------------------------------------------------------------- out <- RSqMC(mc, alpha = 0.05)  ## Methods ----------------------------------------------------------------- print(out) #> Call: #> RSqMC(object = mc, alpha = 0.05) #>  #> R-squared and adjusted R-squared #> type = \"hc3\" #>        est     se   R   2.5%  97.5% #> rsq 0.8045 0.0602 100 0.6520 0.8797 #> adj 0.7906 0.0645 100 0.6272 0.8711 summary(out) #> Call: #> RSqMC(object = mc, alpha = 0.05) #>  #> R-squared and adjusted R-squared #> type = \"hc3\" #>        est     se   R   2.5%  97.5% #> rsq 0.8045 0.0602 100 0.6520 0.8797 #> adj 0.7906 0.0645 100 0.6272 0.8711 coef(out) #>       rsq       adj  #> 0.8045263 0.7905638  vcov(out) #>             rsq         adj #> rsq 0.003627964 0.003887104 #> adj 0.003887104 0.004164754 confint(out, level = 0.95) #>         2.5 %    97.5 % #> rsq 0.6520133 0.8796603 #> adj 0.6271572 0.8710646"},{"path":"https://github.com/jeksterslab/betaMC/reference/SCorMC.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimate Semipartial Correlation Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — SCorMC","title":"Estimate Semipartial Correlation Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — SCorMC","text":"Estimate Semipartial Correlation Coefficients Generate Corresponding Sampling Distribution Using Monte Carlo Method","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/SCorMC.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimate Semipartial Correlation Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — SCorMC","text":"","code":"SCorMC(object, alpha = c(0.05, 0.01, 0.001))"},{"path":"https://github.com/jeksterslab/betaMC/reference/SCorMC.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimate Semipartial Correlation Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — SCorMC","text":"object Object class mc, , output MC() function. alpha Numeric vector. Significance level \\(\\alpha\\).","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/SCorMC.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimate Semipartial Correlation Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — SCorMC","text":"Returns object class betamc list following elements: call Function call. args Function arguments. thetahatstar Sampling distribution \\(r_{s}\\). vcov Sampling variance-covariance matrix \\(r_{s}\\). est Vector estimated \\(r_{s}\\). fun Function used (\"SCorMC\").","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/SCorMC.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Estimate Semipartial Correlation Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — SCorMC","text":"vector semipartial correlation coefficients (\\(r_{s}\\)) derived randomly generated vector parameter estimates. Confidence intervals generated obtaining percentiles corresponding \\(100(1 - \\alpha)\\%\\) generated sampling distribution \\(r_{s}\\), \\(\\alpha\\) significance level.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/reference/SCorMC.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimate Semipartial Correlation Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — SCorMC","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/SCorMC.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Estimate Semipartial Correlation Coefficients and Generate the Corresponding Sampling Distribution Using the Monte Carlo Method — SCorMC","text":"","code":"# Data --------------------------------------------------------------------- data(\"nas1982\", package = \"betaMC\")  # Fit Model in lm ---------------------------------------------------------- object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = nas1982)  # MC ----------------------------------------------------------------------- mc <- MC(   object,   R = 100, # use a large value e.g., 20000L for actual research   seed = 0508 )  # SCorMC ------------------------------------------------------------------- out <- SCorMC(mc, alpha = 0.05)  ## Methods ----------------------------------------------------------------- print(out) #> Call: #> SCorMC(object = mc, alpha = 0.05) #>  #> Semipartial correlations #> type = \"hc3\" #>            est     se   R   2.5%  97.5% #> NARTIC  0.4312 0.0874 100 0.2295 0.5623 #> PCTGRT  0.3430 0.0778 100 0.1650 0.4643 #> PCTSUPP 0.2385 0.0720 100 0.0880 0.3569 summary(out) #> Call: #> SCorMC(object = mc, alpha = 0.05) #>  #> Semipartial correlations #> type = \"hc3\" #>            est     se   R   2.5%  97.5% #> NARTIC  0.4312 0.0874 100 0.2295 0.5623 #> PCTGRT  0.3430 0.0778 100 0.1650 0.4643 #> PCTSUPP 0.2385 0.0720 100 0.0880 0.3569 coef(out) #>    NARTIC    PCTGRT   PCTSUPP  #> 0.4311525 0.3430075 0.2384789  vcov(out) #>                NARTIC        PCTGRT       PCTSUPP #> NARTIC   0.0076365444  0.0016690137 -0.0003859994 #> PCTGRT   0.0016690137  0.0060497385 -0.0006650079 #> PCTSUPP -0.0003859994 -0.0006650079  0.0051908878 confint(out, level = 0.95) #>              2.5 %    97.5 % #> NARTIC  0.22954565 0.5622638 #> PCTGRT  0.16503602 0.4642695 #> PCTSUPP 0.08800891 0.3569279"},{"path":"https://github.com/jeksterslab/betaMC/reference/betaMC-package.html","id":null,"dir":"Reference","previous_headings":"","what":"betaMC: Monte Carlo for Regression Effect Sizes — betaMC-package","title":"betaMC: Monte Carlo for Regression Effect Sizes — betaMC-package","text":"Generates Monte Carlo confidence intervals standardized regression coefficients (beta) effect sizes, including multiple correlation, semipartial correlations, improvement R-squared, squared partial correlations, differences standardized regression coefficients, models fitted lm(). 'betaMC' combines ideas Monte Carlo confidence intervals indirect effect (Pesigan Cheung, 2023 doi:10.3758/s13428-023-02114-4 ) sampling covariance matrix regression coefficients (Dudgeon, 2017 doi:10.1007/s11336-017-9563-z ) generate confidence intervals effect sizes regression.","code":""},{"path":[]},{"path":"https://github.com/jeksterslab/betaMC/reference/betaMC-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"betaMC: Monte Carlo for Regression Effect Sizes — betaMC-package","text":"Maintainer: Ivan Jacob Agaloos Pesigan r.jeksterslab@gmail.com (ORCID) [copyright holder]","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/coef.betamc.html","id":null,"dir":"Reference","previous_headings":"","what":"Estimated Parameter Method for an Object of Class betamc — coef.betamc","title":"Estimated Parameter Method for an Object of Class betamc — coef.betamc","text":"Estimated Parameter Method Object Class betamc","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/coef.betamc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Estimated Parameter Method for an Object of Class betamc — coef.betamc","text":"","code":"# S3 method for betamc coef(object, ...)"},{"path":"https://github.com/jeksterslab/betaMC/reference/coef.betamc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Estimated Parameter Method for an Object of Class betamc — coef.betamc","text":"object Object Class betamc, , output BetaMC(), RSqMC(), SCorMC(), DeltaRSqMC(), PCorMC(), DiffBetaMC() functions. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/coef.betamc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Estimated Parameter Method for an Object of Class betamc — coef.betamc","text":"Returns vector estimated parameters.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/coef.betamc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Estimated Parameter Method for an Object of Class betamc — coef.betamc","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/confint.betamc.html","id":null,"dir":"Reference","previous_headings":"","what":"Confidence Intervals Method for an Object of Class betamc — confint.betamc","title":"Confidence Intervals Method for an Object of Class betamc — confint.betamc","text":"Confidence Intervals Method Object Class betamc","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/confint.betamc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Confidence Intervals Method for an Object of Class betamc — confint.betamc","text":"","code":"# S3 method for betamc confint(object, parm = NULL, level = 0.95, ...)"},{"path":"https://github.com/jeksterslab/betaMC/reference/confint.betamc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Confidence Intervals Method for an Object of Class betamc — confint.betamc","text":"object Object Class betamc, , output BetaMC(), RSqMC(), SCorMC(), DeltaRSqMC(), PCorMC(), DiffBetaMC() functions. parm specification parameters given confidence intervals, either vector numbers vector names. missing, parameters considered. level confidence level required. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/confint.betamc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Confidence Intervals Method for an Object of Class betamc — confint.betamc","text":"Returns matrix confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/confint.betamc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Confidence Intervals Method for an Object of Class betamc — confint.betamc","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/nas1982.html","id":null,"dir":"Reference","previous_headings":"","what":"1982 National Academy of Sciences Doctoral Programs Data — nas1982","title":"1982 National Academy of Sciences Doctoral Programs Data — nas1982","text":"1982 National Academy Sciences Doctoral Programs Data","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/nas1982.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"1982 National Academy of Sciences Doctoral Programs Data — nas1982","text":"","code":"nas1982"},{"path":"https://github.com/jeksterslab/betaMC/reference/nas1982.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"1982 National Academy of Sciences Doctoral Programs Data — nas1982","text":"Ratings 46 doctoral programs psychology USA following variables: QUALITY Program quality ratings. NFACUL Number faculty members program. NGRADS Number program graduates. PCTSUPP Percentage program graduates received support. PCTGRT Percent faculty members holding research grants. NARTIC Number published articles attributed program faculty member. PCTPUB Percent faculty one published article.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/nas1982.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"1982 National Academy of Sciences Doctoral Programs Data — nas1982","text":"National Research Council. (1982). assessment research-doctorate programs United States: Social behavioral sciences. doi:10.17226/9781 . Reproduced permission National Academy Sciences, Courtesy National Academies Press, Washington, D.C.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/print.betamc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for an Object of Class betamc — print.betamc","title":"Print Method for an Object of Class betamc — print.betamc","text":"Print Method Object Class betamc","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/print.betamc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for an Object of Class betamc — print.betamc","text":"","code":"# S3 method for betamc print(x, alpha = NULL, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/betaMC/reference/print.betamc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for an Object of Class betamc — print.betamc","text":"x Object Class betamc, , output BetaMC(), RSqMC(), SCorMC(), DeltaRSqMC(), PCorMC(), DiffBetaMC() functions. alpha Numeric vector. Significance level \\(\\alpha\\). alpha = NULL, use argument alpha used x. digits Digits print. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/print.betamc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for an Object of Class betamc — print.betamc","text":"Prints matrix estimates, standard errors, number Monte Carlo replications, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/print.betamc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for an Object of Class betamc — print.betamc","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/print.mc.html","id":null,"dir":"Reference","previous_headings":"","what":"Print Method for an Object of Class mc — print.mc","title":"Print Method for an Object of Class mc — print.mc","text":"Print Method Object Class mc","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/print.mc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print Method for an Object of Class mc — print.mc","text":"","code":"# S3 method for mc print(x, ...)"},{"path":"https://github.com/jeksterslab/betaMC/reference/print.mc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print Method for an Object of Class mc — print.mc","text":"x Object Class mc. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/print.mc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print Method for an Object of Class mc — print.mc","text":"Prints first set simulated parameter estimates model-implied covariance matrix.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/print.mc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Print Method for an Object of Class mc — print.mc","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/print.mc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Print Method for an Object of Class mc — print.mc","text":"","code":"object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = nas1982) mc <- MC(object, R = 100) print(mc) #> Call: #> MC(object = object, R = 100) #> The first set of simulated parameter estimates #> and model-implied covariance matrix. #>  #> $coef #> [1] 0.07589203 0.16704257 0.15043278 #>  #> $sigmasq #> [1] 18.36997 #>  #> $vechsigmacapx #> [1] 5093.4452  590.1704  840.8989  312.2785  154.8085  512.0073 #>  #> $sigmacapx #>           [,1]     [,2]     [,3] #> [1,] 5093.4452 590.1704 840.8989 #> [2,]  590.1704 312.2785 154.8085 #> [3,]  840.8989 154.8085 512.0073 #>  #> $sigmaysq #> [1] 109.9507 #>  #> $sigmayx #> [1] 611.6342 120.2413 166.6998 #>  #> $sigmacap #>          [,1]      [,2]     [,3]     [,4] #> [1,] 109.9507  611.6342 120.2413 166.6998 #> [2,] 611.6342 5093.4452 590.1704 840.8989 #> [3,] 120.2413  590.1704 312.2785 154.8085 #> [4,] 166.6998  840.8989 154.8085 512.0073 #>  #> $pd #> [1] TRUE #>"},{"path":"https://github.com/jeksterslab/betaMC/reference/summary.betamc.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for an Object of Class betamc — summary.betamc","title":"Summary Method for an Object of Class betamc — summary.betamc","text":"Summary Method Object Class betamc","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/summary.betamc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for an Object of Class betamc — summary.betamc","text":"","code":"# S3 method for betamc summary(object, alpha = NULL, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/betaMC/reference/summary.betamc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for an Object of Class betamc — summary.betamc","text":"object Object Class betamc, , output BetaMC(), RSqMC(), SCorMC(), DeltaRSqMC(), PCorMC(), DiffBetaMC() functions. alpha Numeric vector. Significance level \\(\\alpha\\). alpha = NULL, use argument alpha used object. digits Digits print. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/summary.betamc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for an Object of Class betamc — summary.betamc","text":"Returns matrix estimates, standard errors, number Monte Carlo replications, confidence intervals.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/summary.betamc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary Method for an Object of Class betamc — summary.betamc","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/summary.mc.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for an Object of Class mc — summary.mc","title":"Summary Method for an Object of Class mc — summary.mc","text":"Summary Method Object Class mc","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/summary.mc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for an Object of Class mc — summary.mc","text":"","code":"# S3 method for mc summary(object, digits = 4, ...)"},{"path":"https://github.com/jeksterslab/betaMC/reference/summary.mc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for an Object of Class mc — summary.mc","text":"object Object Class mc, , output MC() function. digits Digits print. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/summary.mc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for an Object of Class mc — summary.mc","text":"Returns list following elements: mean Mean sampling distribution \\(\\boldsymbol{\\hat{\\theta}}\\). var Variance sampling distribution \\(\\boldsymbol{\\hat{\\theta}}\\). bias Monte Carlo simulation bias. rmse Monte Carlo simulation root mean square error. location Location parameter used Monte Carlo simulation. scale Scale parameter used Monte Carlo simulation.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/summary.mc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Summary Method for an Object of Class mc — summary.mc","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/summary.mc.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary Method for an Object of Class mc — summary.mc","text":"","code":"# Fit the regression model object <- lm(QUALITY ~ NARTIC + PCTGRT + PCTSUPP, data = nas1982) mc <- MC(object, R = 100) summary(mc) #> MC(object = object, R = 100) #> $mean #>        b1        b2        b3   sigmasq sigmax1x1 sigmax2x1 sigmax3x1 sigmax2x2  #>    0.0855    0.2192    0.1144   21.0793 3536.5569  466.4309  528.7742  342.2669  #> sigmax3x2 sigmax3x3  #>  155.7474  557.1612  #>  #> $var #>                b1      b2      b3   sigmasq    sigmax1x1  sigmax2x1   sigmax3x1 #> b1         0.0002 -0.0004 -0.0001   -0.0079      -7.7167    -0.5720      0.0516 #> b2        -0.0004  0.0029 -0.0005   -0.0004       8.0391    -0.2946     -2.9652 #> b3        -0.0001 -0.0005  0.0013   -0.0584       6.4137     0.2717      1.7175 #> sigmasq   -0.0079 -0.0004 -0.0584   16.9411    -314.3656    34.8260    -74.0046 #> sigmax1x1 -7.7167  8.0391  6.4137 -314.3656 1123104.2354 83493.9236 100323.7300 #> sigmax2x1 -0.5720 -0.2946  0.2717   34.8260   83493.9236 31672.0469  14133.3509 #> sigmax3x1  0.0516 -2.9652  1.7175  -74.0046  100323.7300 14133.3509  31909.1440 #> sigmax2x2  0.0337 -0.9942  0.4918   18.5096    5453.7952  2730.9280   4642.5670 #> sigmax3x2 -0.2628  0.4262  0.1824  -15.3243   11307.9487  5844.6613   4136.8488 #> sigmax3x3  0.2602  0.5481 -0.9642   67.8322  -15249.8855 -1129.7055    255.9731 #>            sigmax2x2  sigmax3x2   sigmax3x3 #> b1            0.0337    -0.2628      0.2602 #> b2           -0.9942     0.4262      0.5481 #> b3            0.4918     0.1824     -0.9642 #> sigmasq      18.5096   -15.3243     67.8322 #> sigmax1x1  5453.7952 11307.9487 -15249.8855 #> sigmax2x1  2730.9280  5844.6613  -1129.7055 #> sigmax3x1  4642.5670  4136.8488    255.9731 #> sigmax2x2  5151.3870  1066.1870  -1859.1171 #> sigmax3x2  1066.1870  2911.9506   -102.7055 #> sigmax3x3 -1859.1171  -102.7055   8272.2350 #>  #> $bias #>        b1        b2        b3   sigmasq sigmax1x1 sigmax2x1 sigmax3x1 sigmax2x2  #>    0.0013    0.0032    0.0018   -0.1655   29.3878   -4.7749   18.2312    9.0374  #> sigmax3x2 sigmax3x3  #>    4.8353    2.7225  #>  #> $rmse #>        b1        b2        b3   sigmasq sigmax1x1 sigmax2x1 sigmax3x1 sigmax2x2  #>    0.0148    0.0533    0.0360    4.0987 1054.8634  177.1387  178.6685   71.9830  #> sigmax3x2 sigmax3x3  #>   53.9093   90.5369  #>  #> $location #>        b1        b2        b3   sigmasq sigmax1x1 sigmax2x1 sigmax3x1 sigmax2x2  #>    0.0842    0.2160    0.1126   21.2448 3507.1691  471.2058  510.5430  333.2295  #> sigmax3x2 sigmax3x3  #>  150.9121  554.4386  #>  #> $scale #>                b1      b2      b3   sigmasq    sigmax1x1  sigmax2x1   sigmax3x1 #> b1         0.0002 -0.0003 -0.0002   -0.0073      -6.4514    -0.1818      0.0793 #> b2        -0.0003  0.0027 -0.0006    0.0097       5.4783     0.6385     -1.2960 #> b3        -0.0002 -0.0006  0.0015   -0.0510       4.7717    -0.4470      1.1153 #> sigmasq   -0.0073  0.0097 -0.0510   15.5891    -623.3795   -69.6223   -115.0921 #> sigmax1x1 -6.4514  5.4783  4.7717 -623.3795 1234077.9191 70017.7837 135353.8871 #> sigmax2x1 -0.1818  0.6385 -0.4470  -69.6223   70017.7837 32380.2229  19033.6847 #> sigmax3x1  0.0793 -1.2960  1.1153 -115.0921  135353.8871 19033.6847  43294.1991 #> sigmax2x2  0.1241 -1.2801  0.5313   11.0921    -161.6877  2275.8820   3152.0325 #> sigmax3x2 -0.1904  0.6456  0.2802  -18.6658   10148.7795  6598.7503   5669.9978 #> sigmax3x3  0.2132  0.6850 -0.9885   42.7723   -8922.3944   920.0158   1333.8790 #>            sigmax2x2  sigmax3x2  sigmax3x3 #> b1            0.1241    -0.1904     0.2132 #> b2           -1.2801     0.6456     0.6850 #> b3            0.5313     0.2802    -0.9885 #> sigmasq      11.0921   -18.6658    42.7723 #> sigmax1x1  -161.6877 10148.7795 -8922.3944 #> sigmax2x1  2275.8820  6598.7503   920.0158 #> sigmax3x1  3152.0325  5669.9978  1333.8790 #> sigmax2x2  5980.8603  1092.1986 -1134.2969 #> sigmax3x2  1092.1986  3700.7183   704.7217 #> sigmax3x3 -1134.2969   704.7217  7350.2416 #>"},{"path":"https://github.com/jeksterslab/betaMC/reference/vcov.betamc.html","id":null,"dir":"Reference","previous_headings":"","what":"Sampling Variance-Covariance Matrix Method for an Object of Class betamc — vcov.betamc","title":"Sampling Variance-Covariance Matrix Method for an Object of Class betamc — vcov.betamc","text":"Sampling Variance-Covariance Matrix Method Object Class betamc","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/vcov.betamc.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sampling Variance-Covariance Matrix Method for an Object of Class betamc — vcov.betamc","text":"","code":"# S3 method for betamc vcov(object, ...)"},{"path":"https://github.com/jeksterslab/betaMC/reference/vcov.betamc.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sampling Variance-Covariance Matrix Method for an Object of Class betamc — vcov.betamc","text":"object Object Class betamc, , output BetaMC(), RSqMC(), SCorMC(), DeltaRSqMC(), PCorMC(), DiffBetaMC() functions. ... additional arguments.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/vcov.betamc.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sampling Variance-Covariance Matrix Method for an Object of Class betamc — vcov.betamc","text":"Returns variance-covariance matrix estimates.","code":""},{"path":"https://github.com/jeksterslab/betaMC/reference/vcov.betamc.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Sampling Variance-Covariance Matrix Method for an Object of Class betamc — vcov.betamc","text":"Ivan Jacob Agaloos Pesigan","code":""},{"path":"https://github.com/jeksterslab/betaMC/news/index.html","id":"betamc-1329000","dir":"Changelog","previous_headings":"","what":"betaMC 1.3.2.9000","title":"betaMC 1.3.2.9000","text":"Latest development version.","code":""},{"path":"https://github.com/jeksterslab/betaMC/news/index.html","id":"betamc-132","dir":"Changelog","previous_headings":"","what":"betaMC 1.3.2","title":"betaMC 1.3.2","text":"CRAN release: 2024-04-14","code":""},{"path":"https://github.com/jeksterslab/betaMC/news/index.html","id":"patch-1-3-2","dir":"Changelog","previous_headings":"","what":"Patch","title":"betaMC 1.3.2","text":"Minor documentation edits.","code":""},{"path":"https://github.com/jeksterslab/betaMC/news/index.html","id":"betamc-131","dir":"Changelog","previous_headings":"","what":"betaMC 1.3.1","title":"betaMC 1.3.1","text":"CRAN release: 2023-10-15","code":""},{"path":"https://github.com/jeksterslab/betaMC/news/index.html","id":"patch-1-3-1","dir":"Changelog","previous_headings":"","what":"Patch","title":"betaMC 1.3.1","text":"Minor edits setting seed.","code":""},{"path":"https://github.com/jeksterslab/betaMC/news/index.html","id":"betamc-130","dir":"Changelog","previous_headings":"","what":"betaMC 1.3.0","title":"betaMC 1.3.0","text":"CRAN release: 2023-08-22","code":""},{"path":"https://github.com/jeksterslab/betaMC/news/index.html","id":"minor-1-3-0","dir":"Changelog","previous_headings":"","what":"Minor","title":"betaMC 1.3.0","text":"Added MCMI() function perform Monte Carlo simulation parameters data sets missing values using multiple imputation.","code":""},{"path":"https://github.com/jeksterslab/betaMC/news/index.html","id":"betamc-120","dir":"Changelog","previous_headings":"","what":"betaMC 1.2.0","title":"betaMC 1.2.0","text":"CRAN release: 2023-04-13","code":""},{"path":"https://github.com/jeksterslab/betaMC/news/index.html","id":"minor-1-2-0","dir":"Changelog","previous_headings":"","what":"Minor","title":"betaMC 1.2.0","text":"Monte Carlo simulation parameters done MC() function. output MC() function passed BetaMC(), RSqMC(), SCorMC(), DeltaRSqMC(), PCorMC(), DiffBetaMC() functions generate Monte Carlo confidence intervals various regression effect sizes.","code":""},{"path":"https://github.com/jeksterslab/betaMC/news/index.html","id":"betamc-100","dir":"Changelog","previous_headings":"","what":"betaMC 1.0.0","title":"betaMC 1.0.0","text":"CRAN release: 2023-01-09","code":""},{"path":"https://github.com/jeksterslab/betaMC/news/index.html","id":"major-1-0-0","dir":"Changelog","previous_headings":"","what":"Major","title":"betaMC 1.0.0","text":"begins.","code":""}]
